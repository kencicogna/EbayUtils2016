#!/usr/bin/perl 
# generated by wxGlade 0.6.5 (standalone edition) on Tue Apr 03 16:32:30 2012
# To get wxPerl visit http://wxPerl.sourceforge.net/

use Wx 0.15 qw[:allclasses];
use strict;
use DBI;

$|=1;

package MyFrame;

use Carp;
use Wx qw(:everything);
use Wx::Html;
use base qw(Wx::Frame);
use strict;
use POSIX qw(strftime);
use Data::Dumper qw(Dumper);
use Config::Simple;
use File::Basename;
use File::Copy qw(move);
use File::Path qw(make_path);
use XML::Simple;
use LWP::Simple;
use POSIX qw/strftime/;
#use Image::Grab qw(grab);
use Storable 'dclone';


use lib 'lib';
use ShipItPackageList;
use ShipItEbayAPICall;
use EndiciaAPICall;

# Package level config
our $OWNER='Owner';				                              # 'Amy','Ken','Owner' i.e. C:\User\Ken\Documents\...
our $configuration_file = 'cfg/shipit.ini';             # Program level configuration
our $postage_provider_config_file = 'cfg/endicia.ini';  # Stamps.com, Endicia, etc...

our $image_cache = 'images/cache';
our $images = {
  SetBitmapLabel => {
    btn_stage  => 'images/stage_red.png',
    btn_prev   => 'images/prev_red.png',
    btn_next   => 'images/next_red.png',
    btn_print  => 'images/print_red.png',
  },
  SetBitmapDisabled => {
    btn_stage  => 'images/stage_grey.png',
    btn_prev   => 'images/prev_grey.png',
    btn_next   => 'images/next_grey.png',
    btn_print  => 'images/print_grey.png',
  },
  SetBitmapSelected  => {
    btn_stage  => 'images/stage_red2.png',
    btn_prev   => 'images/prev_red2.png',
    btn_next   => 'images/next_red2.png',
    btn_print  => 'images/print_red2.png',
  },
};



################################################################################
# CONSTRUCTOR
################################################################################
sub new {
	my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
	$parent = undef              unless defined $parent;
	$id     = -1                 unless defined $id;
	$title  = ""                 unless defined $title;
	$pos    = wxDefaultPosition  unless defined $pos;
	$size   = wxDefaultSize      unless defined $size;
	$name   = ""                 unless defined $name;

# begin wxGlade: MyFrame::new
$style = wxCAPTION|wxCLOSE_BOX|wxFULL_REPAINT_ON_RESIZE|wxMAXIMIZE_BOX|wxMINIMIZE_BOX|wxRESIZE_BORDER|wxSYSTEM_MENU 
unless defined $style;

$self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
$self->{statusbar} = $self->CreateStatusBar(1);
$self->{panel_header} = Wx::Panel->new($self, wxID_ANY);
$self->{rb_package_display} = Wx::RadioBox->new($self->{panel_header}, wxID_ANY, "Package Display", wxDefaultPosition, wxDefaultSize, ["Domestic", "International"], 0, wxRA_SPECIFY_COLS);
$self->{lbl_status} = Wx::StaticText->new($self->{panel_header}, wxID_ANY, "  Status Message  ", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER);
$self->{bitmap_1} = Wx::StaticBitmap->new($self->{panel_header}, wxID_ANY, Wx::Bitmap->new("images/winter_dear.png", wxBITMAP_TYPE_ANY));
$self->{tc_advDays} = Wx::TextCtrl->new($self->{panel_header}, wxID_ANY, "0", wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER|wxTE_RIGHT);
$self->{lbl_days} = Wx::StaticText->new($self->{panel_header}, wxID_ANY, "Days");
$self->{sz_ship_date_staticbox} = Wx::StaticBox->new($self->{panel_header}, wxID_ANY, "Advance Ship Date" );
$self->{nb_main} = Wx::Notebook->new($self, wxID_ANY);
$self->{nb_individual_pane} = Wx::Panel->new($self->{nb_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL|wxFULL_REPAINT_ON_RESIZE);
$self->{lbl_buyer} = Wx::StaticText->new($self->{nb_individual_pane}, wxID_ANY, "Cicogna, Ken\n");
$self->{lbl_address} = Wx::StaticText->new($self->{nb_individual_pane}, wxID_ANY, "7 Park Road Ct.\nLombard IL, 60148\nUnited States\n");
$self->{sz_name_address_staticbox} = Wx::StaticBox->new($self->{nb_individual_pane}, wxID_ANY, "Name and Address" );
$self->{panel_hide_notes} = Wx::Panel->new($self->{nb_individual_pane}, wxID_ANY);
$self->{panel_notes} = Wx::Panel->new($self->{panel_hide_notes}, wxID_ANY);
$self->{lbl_notes} = Wx::StaticText->new($self->{panel_notes}, wxID_ANY, "M - Multiple Orders Paid Separately\nN - Note From Buyer:\n       Ship it right away!\n");
$self->{sz_panel_notes_staticbox} = Wx::StaticBox->new($self->{panel_hide_notes}, wxID_ANY, "Notes" );
$self->{lbl_lbs} = Wx::StaticText->new($self->{nb_individual_pane}, wxID_ANY, "Lbs.");
$self->{lbl_oz} = Wx::StaticText->new($self->{nb_individual_pane}, wxID_ANY, "Oz.");
$self->{tc_lbs} = Wx::TextCtrl->new($self->{nb_individual_pane}, wxID_ANY, "0", wxDefaultPosition, wxDefaultSize, wxTE_AUTO_URL|wxTE_RIGHT);
$self->{tc_oz} = Wx::TextCtrl->new($self->{nb_individual_pane}, wxID_ANY, "0", wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER|wxTE_RIGHT);
$self->{sz_weight_staticbox} = Wx::StaticBox->new($self->{nb_individual_pane}, wxID_ANY, "Weight" );
$self->{choice_mailclass} = Wx::Choice->new($self->{nb_individual_pane}, wxID_ANY, wxDefaultPosition, wxDefaultSize, ["First Class", "Priority", "Media Mail", "Parcel Post"], );
$self->{btn_send_email} = Wx::Button->new($self->{nb_individual_pane}, wxID_ANY, "Send Email");
$self->{btn_hidenotes} = Wx::Button->new($self->{nb_individual_pane}, wxID_ANY, "Hide Notes");
$self->{dd_packaging} = Wx::Choice->new($self->{nb_individual_pane}, wxID_ANY, wxDefaultPosition, wxDefaultSize, ["Choose Package Type"], );
$self->{dd_bubble_wrap} = Wx::Choice->new($self->{nb_individual_pane}, wxID_ANY, wxDefaultPosition, wxDefaultSize, ["Choose Bubble Wrap", "Y", "N"], );
$self->{btn_save_pkg} = Wx::Button->new($self->{nb_individual_pane}, wxID_ANY, "SAVE");
$self->{sz_packaging_type_staticbox} = Wx::StaticBox->new($self->{nb_individual_pane}, wxID_ANY, "Single Unit Packaging Details" );
$self->{panel_griditems} = Wx::ScrolledWindow->new($self->{nb_individual_pane}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
$self->{grid_items} = Wx::Grid->new($self->{panel_griditems}, wxID_ANY);
$self->{sz_items_staticbox} = Wx::StaticBox->new($self->{nb_individual_pane}, wxID_ANY, "Items" );
$self->{nb_batch_pane} = Wx::Panel->new($self->{nb_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER|wxTAB_TRAVERSAL);
$self->{grid_batch} = Wx::Grid->new($self->{nb_batch_pane}, wxID_ANY);
$self->{nb_configuration} = Wx::ScrolledWindow->new($self->{nb_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER|wxTAB_TRAVERSAL);
$self->{lbl_configuration_file} = Wx::StaticText->new($self->{nb_configuration}, wxID_ANY, "Configuruation File:", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
$self->{lbl_environment} = Wx::StaticText->new($self->{nb_configuration}, wxID_ANY, "Environment:", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
$self->{lbl_database} = Wx::StaticText->new($self->{nb_configuration}, wxID_ANY, "Database:", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
$self->{lbl_database_type} = Wx::StaticText->new($self->{nb_configuration}, wxID_ANY, "Database Type:", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
$self->{lbl_user} = Wx::StaticText->new($self->{nb_configuration}, wxID_ANY, "User:", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
$self->{lbl_password} = Wx::StaticText->new($self->{nb_configuration}, wxID_ANY, "Password:", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
$self->{lbl_installed_location} = Wx::StaticText->new($self->{nb_configuration}, wxID_ANY, "Installed Location:", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
$self->{btn_config_file_chooser} = Wx::Button->new($self->{nb_configuration}, wxID_ANY, "Choose File");
$self->{dd_config_environment} = Wx::Choice->new($self->{nb_configuration}, wxID_ANY, wxDefaultPosition, wxDefaultSize, ["Choose Environment"], );
$self->{tc_config_database} = Wx::TextCtrl->new($self->{nb_configuration}, wxID_ANY, "");
$self->{tc_config_db_type} = Wx::TextCtrl->new($self->{nb_configuration}, wxID_ANY, "");
$self->{tc_config_user} = Wx::TextCtrl->new($self->{nb_configuration}, wxID_ANY, "");
$self->{tc_config_password} = Wx::TextCtrl->new($self->{nb_configuration}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_PASSWORD);
$self->{tc_config_installed_location} = Wx::TextCtrl->new($self->{nb_configuration}, wxID_ANY, "");
$self->{btn_config_test} = Wx::Button->new($self->{nb_configuration}, wxID_ANY, "Test Connection");
$self->{nb_log} = Wx::ScrolledWindow->new($self->{nb_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
$self->{lbl_log} = Wx::StaticText->new($self->{nb_log}, wxID_ANY, "Log Information...");
$self->{nb_misc} = Wx::Panel->new($self->{nb_main}, wxID_ANY);
$self->{tc_name_address} = Wx::TextCtrl->new($self->{nb_misc}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE);
$self->{image_logo} = Wx::StaticBitmap->new($self, wxID_ANY, Wx::Bitmap->new("images/theteachingtoyboxlogo.png", wxBITMAP_TYPE_ANY), wxDefaultPosition, wxDefaultSize, wxFULL_REPAINT_ON_RESIZE);
$self->{btn_stage} = Wx::BitmapButton->new($self, wxID_ANY, Wx::Bitmap->new("images/stage_red.png", wxBITMAP_TYPE_ANY));
$self->{btn_prev} = Wx::BitmapButton->new($self, wxID_ANY, Wx::Bitmap->new("images/prev_red.png", wxBITMAP_TYPE_ANY));
$self->{btn_next} = Wx::BitmapButton->new($self, wxID_ANY, Wx::Bitmap->new("images/next_red.png", wxBITMAP_TYPE_ANY));
$self->{btn_print} = Wx::BitmapButton->new($self, wxID_ANY, Wx::Bitmap->new("images/print_red.png", wxBITMAP_TYPE_ANY));

$self->__set_properties();
$self->__do_layout();

Wx::Event::EVT_RADIOBOX($self, $self->{rb_package_display}->GetId, \&rb_pkg_disp_evtRadioBox);
Wx::Event::EVT_TEXT_ENTER($self, $self->{tc_advDays}->GetId, \&tc_advDays_evtTextEnter);
Wx::Event::EVT_TEXT($self, $self->{tc_advDays}->GetId, \&tc_advDays_evtTextChanged);
Wx::Event::EVT_TEXT($self, $self->{tc_lbs}->GetId, \&tc_lbs_evtTextChanged);
Wx::Event::EVT_TEXT_ENTER($self, $self->{tc_oz}->GetId, \&tc_oz_evtTextEnter);
Wx::Event::EVT_TEXT($self, $self->{tc_oz}->GetId, \&tc_oz_evtTextChanged);
Wx::Event::EVT_CHOICE($self, $self->{choice_mailclass}->GetId, \&choice_mailclass_evtChoice);
Wx::Event::EVT_BUTTON($self, $self->{btn_send_email}->GetId, \&evt_btn_send_email_evtButton);
Wx::Event::EVT_BUTTON($self, $self->{btn_hidenotes}->GetId, \&btn_hidenotes_evtButton);
Wx::Event::EVT_BUTTON($self, $self->{btn_save_pkg}->GetId, \&btn_save_pkg_evtClick);
Wx::Event::EVT_GRID_CMD_CELL_CHANGE($self, $self->{grid_batch}->GetId, \&evt_grid_cell_changed);
Wx::Event::EVT_GRID_CMD_SELECT_CELL($self, $self->{grid_batch}->GetId, \&evt_grid_cell_select);
Wx::Event::EVT_BUTTON($self, $self->{btn_config_file_chooser}->GetId, \&btn_config_file_chooser_onClick);
Wx::Event::EVT_CHOICE($self, $self->{dd_config_environment}->GetId, \&dd_config_environment_evtChoice);
Wx::Event::EVT_BUTTON($self, $self->{btn_config_test}->GetId, \&btn_config_test_onClick);
Wx::Event::EVT_NOTEBOOK_PAGE_CHANGED($self, $self->{nb_main}->GetId, \&nb_main_evtPageChanged);
Wx::Event::EVT_BUTTON($self, $self->{btn_stage}->GetId, \&btn_stage_onClick);
Wx::Event::EVT_BUTTON($self, $self->{btn_prev}->GetId, \&btn_prev_onClick);
Wx::Event::EVT_BUTTON($self, $self->{btn_next}->GetId, \&btn_next_onClick);
Wx::Event::EVT_BUTTON($self, $self->{btn_print}->GetId, \&btn_print_onClick);

# end wxGlade

  #########################################
  # USER DEFINED OPTIONS
  #########################################

  # WxGlade is not setting this style eventhough it's select in the UI
  $self->{btn_stage}->SetWindowStyle( wxNO_BORDER ); 
  $self->{btn_prev}->SetWindowStyle( wxNO_BORDER ); 
  $self->{btn_next}->SetWindowStyle( wxNO_BORDER ); 
  $self->{btn_print}->SetWindowStyle( wxNO_BORDER );

  # Global Initializations
  $self->{DateAdvance} = 0;
  $self->{btn_print}->Disable;
  $self->{batchmode} = 0;
  $self->{log_text} = '';
  $self->{panel_notes_toggle} = 1;
  $self->{panel_hide_notes}->Show( $self->{panel_notes_toggle} );

  my $package_display_default = $self->{rb_package_display}->GetStringSelection();
  $self->{type} = 'D' if ( $package_display_default =~ /domestic/i );
  $self->{type} = 'I' if ( $package_display_default =~ /international/i );

  # Grid Initializations
  $self->{default_rowsize} = 150;
  # -- Single - Grid Items
  $self->{gi_attr_default}  = Wx::GridCellAttr->new();
  $self->{gi_attr_default}->SetBackgroundColour( Wx::Colour->new('WHITE') );
#  $self->{gi_attr_default}->SetDefaultCellBackgroundColour( Wx::Colour->new('WHITE') );
  $self->{gi_attr_default}->SetAlignment( wxALIGN_CENTRE, wxALIGN_CENTRE  );
  $self->{gi_attr_default}->SetFont( 
      Wx::Font->new(14, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, 0, '', wxFONTENCODING_DEFAULT) );

  $self->{gi_attr_hl} = Wx::GridCellAttr->new();
  $self->{gi_attr_hl}->SetBackgroundColour( Wx::Colour->new('LIGHT BLUE') );
#  $self->{gi_attr_hl}->SetDefaultCellBackgroundColour( Wx::Colour->new('LIGHT BLUE') );
  $self->{gi_attr_hl}->SetAlignment( wxALIGN_CENTRE, wxALIGN_CENTRE  );
  $self->{gi_attr_hl}->SetFont( 
      Wx::Font->new(14, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, 0, '', wxFONTENCODING_DEFAULT) );

  # -- Single - Grid Items
  $self->{grid_batch}->{emphasis_row} = 0;

  $self->{attr_default}  = Wx::GridCellAttr->new();
  $self->{attr_default}->SetBackgroundColour( Wx::Colour->new('WHITE') );
  $self->{attr_default}->SetAlignment( wxALIGN_LEFT, wxALIGN_CENTRE  );
  $self->{attr_default}->SetFont( 
      Wx::Font->new(16, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, 0, '', wxFONTENCODING_DEFAULT) );

  $self->{attr_hl} = Wx::GridCellAttr->new();
  $self->{attr_hl}->SetBackgroundColour( Wx::Colour->new('LIGHT BLUE') );
  $self->{attr_hl}->SetAlignment( wxALIGN_LEFT, wxALIGN_CENTRE  );
  $self->{attr_hl}->SetFont( 
      Wx::Font->new(16, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, 0, '', wxFONTENCODING_DEFAULT) );

  $self->{attr_emphasis} = Wx::GridCellAttr->new();
  $self->{attr_emphasis}->SetBackgroundColour( Wx::Colour->new(128,255,255) );
  $self->{attr_emphasis}->SetAlignment( wxALIGN_LEFT, wxALIGN_CENTRE  );
  $self->{attr_emphasis}->SetFont( 
      Wx::Font->new(18, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_MAX, 0, '', wxFONTENCODING_DEFAULT) );

  # E-Packet: List of eligible countries ( According to USPS website 10/02/2016 - https://www.usps.com/business/international-shipping.htm )
  my @epacket_list = qw(
        Australia
        Austria
        Belgium
        Brazil
        Canada
        Croatia
        Denmark
        Estonia
        Finland
        France
        Germany
        Gibraltar
        Greece
        Hungary
        Ireland
        Israel
        Italy
        Japan
        Latvia
        Lithuania
        Luxembourg
        Malaysia
        Malta
        Netherlands
        Norway
        Portugal
        Russia
        Singapore
        Spain
        Sweden
        Switzerland
      );

  push( @epacket_list, ('Hong Kong', 'New Zealand', 'Great Britain', 'United Kingdom') ); # NOTE: United Kingdom is not actually on the list, so we have to
                                                                                          #       change in to 'Great Britain' before creating the label
  for my $c ( @epacket_list ) {
    $c =~ s/^\s+//;
    $c =~ s/\s+$//;
    $self->{epacket_eligible_countries}->{uc($c)} = 1;
  }

  # Map mailclass choice to Endicia 'MailClass' and 'MailPiece' fields
	# Important: 'mail_map_keys' MUST match keys of 'mail_map'
  $self->{mail_map_keys} = {
    'D' => [ 'First Class', 'Priority', 'Media Mail',     'Parcel Post' ],
    'I' => [ 'IPA', 'E-Packet' ],
  };
  $self->{mail_map} = {
#     'D' => {
#       'First Class'   => {mailclass=>'FIRST',      mailpiece=>'RECTPARCEL'},   
#       'Priority'      => {mailclass=>'PRIORITY',   mailpiece=>'RECTPARCEL'},
#       'Media Mail'    => {mailclass=>'MEDIAMAIL',  mailpiece=>'RECTPARCEL'},
#       'Parcel Post',  => {mailclass=>'PARCELPOST', mailpiece=>'RECTPARCEL'},
#     },
    'D' => {
      'First Class'   => {mailclass=>'First',      mailpiece=>'Parcel'},   
      'Priority'      => {mailclass=>'Priority',   mailpiece=>'Parcel'},
      'Media Mail'    => {mailclass=>'MediaMail',  mailpiece=>'Parcel'},
    },
    'I' => {
      'IPA'       => {mailclass=>'IPA', mailpiece=>'Parcel'},
      'E-Packet'  => {mailclass=>'CommercialePacket', mailpiece=>'Parcel'},
    },
  };

  # Load alternate images
  $self->__SetSwapImages();
 	$self->{missing_image} = Wx::Bitmap->new("images/missing.png", wxBITMAP_TYPE_ANY);

  $self->banner('info','Welcome to Teaching Toy Box Shipping Software');

  # Move to the installation directory - all of the paths are relative to this location 
  $self->{installed_location} = dirname($0);
  system("cd $self->{installed_location}");

  # Load environment choices from config file (shipit.ini)
  my $cfg = Config::Simple->new();
  $cfg->read($configuration_file) or die $cfg->error();
  my %environment_choices = map { (split /\./)[0] => 1 } keys %{ $cfg->vars() };
  for my $environment ( sort keys %environment_choices ) {
    $self->{dd_config_environment}->Append( $environment );
  }

	# Start on the select environment page
  $self->{nb_main}->ChangeSelection(2);

	return $self;

} # end new()


################################################################################
sub __set_properties {
	my $self = shift;

# begin wxGlade: MyFrame::__set_properties
$self->SetTitle("The Teaching Toy Box - SHIP IT!");
$self->SetSize(Wx::Size->new(1325, 904));
$self->SetBackgroundColour(Wx::Colour->new(255, 255, 255));
$self->{statusbar}->SetStatusWidths(-1);

# statusbar fields
my( @statusbar_fields ) = (
    "Welcome to the new and improved SHIP IT 2.0",
);

if( @statusbar_fields ) {
    $self->{statusbar}->SetStatusText($statusbar_fields[$_], $_)
    for 0 .. $#statusbar_fields ;
}
$self->{rb_package_display}->SetSelection(0);
$self->{lbl_status}->SetMinSize(Wx::Size->new(-1, 29));
$self->{lbl_status}->SetBackgroundColour(Wx::Colour->new(211, 236, 240));
$self->{lbl_status}->SetForegroundColour(Wx::Colour->new(255, 255, 255));
$self->{lbl_status}->SetFont(Wx::Font->new(18, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{panel_header}->SetBackgroundColour(Wx::Colour->new(211, 236, 240));
$self->{lbl_buyer}->SetMinSize(Wx::Size->new(-1,30));
$self->{lbl_buyer}->SetFont(Wx::Font->new(24, wxMODERN, wxNORMAL, wxBOLD, 0, "Courier New"));
$self->{lbl_address}->SetMinSize(Wx::Size->new(-1, 70));
$self->{lbl_address}->SetFont(Wx::Font->new(12, wxMODERN, wxNORMAL, wxBOLD, 0, "Courier New"));
$self->{lbl_notes}->SetFont(Wx::Font->new(12, wxMODERN, wxNORMAL, wxBOLD, 0, "Courier New"));
$self->{tc_lbs}->SetMinSize(Wx::Size->new(80, 40));
$self->{tc_lbs}->SetFont(Wx::Font->new(14, wxDEFAULT, wxNORMAL, wxNORMAL, 0, ""));
$self->{tc_lbs}->Enable(0);
$self->{tc_oz}->SetMinSize(Wx::Size->new(80, 40));
$self->{tc_oz}->SetFont(Wx::Font->new(14, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{tc_oz}->Enable(0);
$self->{choice_mailclass}->SetMinSize(Wx::Size->new(120, 28));
$self->{choice_mailclass}->SetFont(Wx::Font->new(12, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{choice_mailclass}->SetSelection(0);
$self->{btn_send_email}->SetMinSize(Wx::Size->new(-1, 28));
$self->{btn_hidenotes}->SetMinSize(Wx::Size->new(-1, 28));
$self->{btn_hidenotes}->Show(0);
$self->{dd_packaging}->SetFont(Wx::Font->new(12, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{dd_packaging}->SetSelection(0);
$self->{dd_bubble_wrap}->SetFont(Wx::Font->new(12, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{dd_bubble_wrap}->SetSelection(0);
$self->{btn_save_pkg}->SetMinSize(Wx::Size->new(50, -1));
$self->{btn_save_pkg}->SetFont(Wx::Font->new(12, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{grid_items}->CreateGrid(5, 7);
$self->{grid_items}->SetRowLabelSize(1);
$self->{grid_items}->EnableEditing(0);
$self->{grid_items}->EnableDragRowSize(0);
$self->{grid_items}->EnableDragGridSize(0);
$self->{grid_items}->SetSelectionMode(wxGridSelectCells);
$self->{grid_items}->SetColLabelValue(0, "Picture");
$self->{grid_items}->SetColSize(0, 150);
$self->{grid_items}->SetColLabelValue(1, "Qty");
$self->{grid_items}->SetColSize(1, 40);
$self->{grid_items}->SetColLabelValue(2, "Variation");
$self->{grid_items}->SetColSize(2, 150);
$self->{grid_items}->SetColLabelValue(3, "Title");
$self->{grid_items}->SetColSize(3, 350);
$self->{grid_items}->SetColLabelValue(4, "Packaging");
$self->{grid_items}->SetColSize(4, 80);
$self->{grid_items}->SetColLabelValue(5, "Bubble Wrap");
$self->{grid_items}->SetColSize(5, 80);
$self->{grid_items}->SetColLabelValue(6, "Packaged Weight");
$self->{grid_items}->SetFont(Wx::Font->new(12, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{panel_griditems}->SetBackgroundColour(Wx::Colour->new(211, 236, 240));
$self->{panel_griditems}->SetScrollRate(10, 10);
$self->{grid_batch}->CreateGrid(20, 4);
$self->{grid_batch}->SetSelectionMode(wxGridSelectCells);
$self->{grid_batch}->SetColLabelValue(0, "ID");
$self->{grid_batch}->SetColLabelValue(1, "Description");
$self->{grid_batch}->SetColLabelValue(2, "Weight Lbs");
$self->{grid_batch}->SetColLabelValue(3, "Weight Oz");
$self->{grid_batch}->SetBackgroundColour(Wx::Colour->new(153, 255, 127));
$self->{lbl_configuration_file}->SetMinSize(Wx::Size->new(-1, 21));
$self->{lbl_environment}->SetMinSize(Wx::Size->new(-1, 21));
$self->{lbl_database}->SetMinSize(Wx::Size->new(-1, 21));
$self->{lbl_database_type}->SetMinSize(Wx::Size->new(-1, 21));
$self->{lbl_user}->SetMinSize(Wx::Size->new(-1, 21));
$self->{lbl_password}->SetMinSize(Wx::Size->new(-1, 21));
$self->{lbl_installed_location}->SetMinSize(Wx::Size->new(-1, 21));
$self->{btn_config_file_chooser}->SetMinSize(Wx::Size->new(-1, 21));
$self->{dd_config_environment}->SetMinSize(Wx::Size->new(-1, 21));
$self->{dd_config_environment}->SetSelection(0);
$self->{tc_config_database}->SetMinSize(Wx::Size->new(300, 21));
$self->{tc_config_db_type}->SetMinSize(Wx::Size->new(300, 21));
$self->{tc_config_user}->SetMinSize(Wx::Size->new(300, 21));
$self->{tc_config_password}->SetMinSize(Wx::Size->new(300, 21));
$self->{tc_config_installed_location}->SetMinSize(Wx::Size->new(300, 21));
$self->{btn_config_test}->SetMinSize(Wx::Size->new(-1, 21));
$self->{nb_configuration}->SetScrollRate(10, 10);
$self->{lbl_log}->SetMinSize(Wx::Size->new(-1, 1000));
$self->{nb_log}->SetScrollRate(10, 10);
$self->{tc_name_address}->SetMinSize(Wx::Size->new(-1, 70));
$self->{tc_name_address}->SetFont(Wx::Font->new(20, wxMODERN, wxNORMAL, wxNORMAL, 0, ""));
$self->{image_logo}->SetBackgroundColour(Wx::Colour->new(255, 255, 255));
$self->{btn_stage}->SetMinSize(Wx::Size->new(75, 23));
$self->{btn_stage}->SetBackgroundColour(Wx::Colour->new(255, 255, 255));
$self->{btn_stage}->Enable(0);
$self->{btn_prev}->SetMinSize(Wx::Size->new(75, 23));
$self->{btn_prev}->SetBackgroundColour(Wx::Colour->new(255, 255, 255));
$self->{btn_prev}->Enable(0);
$self->{btn_next}->SetMinSize(Wx::Size->new(75, 23));
$self->{btn_next}->SetBackgroundColour(Wx::Colour->new(255, 255, 255));
$self->{btn_next}->Enable(0);
$self->{btn_print}->SetMinSize(Wx::Size->new(75, 23));
$self->{btn_print}->SetBackgroundColour(Wx::Colour->new(255, 255, 255));
$self->{btn_print}->Enable(0);
# end wxGlade
}


################################################################################
sub __do_layout {
	my $self = shift;

# begin wxGlade: MyFrame::__do_layout
$self->{sizer_main} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sizer_buttons} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sizer_5} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sizer_4} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sizer_1} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sizer_3} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sizer_2} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sizer_nb_dom_pane} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sz_package_details} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sz_items_staticbox}->Lower();
$self->{sz_items} = Wx::StaticBoxSizer->new($self->{sz_items_staticbox}, wxVERTICAL);
$self->{sz_grid_items} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sz_name_addr_weight} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sz_weight_mail} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sz_packaging_type_staticbox}->Lower();
$self->{sz_packaging_type} = Wx::StaticBoxSizer->new($self->{sz_packaging_type_staticbox}, wxHORIZONTAL);
$self->{sz_pkg_details} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sz_mail_hideButton} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sz_weight_staticbox}->Lower();
$self->{sz_weight} = Wx::StaticBoxSizer->new($self->{sz_weight_staticbox}, wxVERTICAL);
$self->{gsz_lbs_oz} = Wx::FlexGridSizer->new(2, 2, 2, 2);
$self->{sz_panel_notes_staticbox}->Lower();
$self->{sz_panel_notes} = Wx::StaticBoxSizer->new($self->{sz_panel_notes_staticbox}, wxVERTICAL);
$self->{sizer_7} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sz_name_address_staticbox}->Lower();
$self->{sz_name_address} = Wx::StaticBoxSizer->new($self->{sz_name_address_staticbox}, wxVERTICAL);
$self->{sz_status_disp_toggle} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sz_ship_date_staticbox}->Lower();
$self->{sz_ship_date} = Wx::StaticBoxSizer->new($self->{sz_ship_date_staticbox}, wxHORIZONTAL);
$self->{sz_status_disp_toggle}->Add($self->{rb_package_display}, 0, wxALIGN_BOTTOM|wxALL, 8);
$self->{sz_status_disp_toggle}->Add(5, 20, 1, 0, 0);
$self->{sz_status_disp_toggle}->Add($self->{lbl_status}, 0, wxALIGN_BOTTOM|wxALL, 10);
$self->{sz_status_disp_toggle}->Add(5, 20, 1, 0, 0);
$self->{sz_status_disp_toggle}->Add($self->{bitmap_1}, 0, wxALIGN_RIGHT, 0);
$self->{sz_ship_date}->Add($self->{tc_advDays}, 0, wxALIGN_BOTTOM|wxALL, 5);
$self->{sz_ship_date}->Add($self->{lbl_days}, 0, wxALIGN_BOTTOM|wxALIGN_CENTER_VERTICAL|wxALL, 5);
$self->{sz_status_disp_toggle}->Add($self->{sz_ship_date}, 0, wxALIGN_BOTTOM|wxALIGN_RIGHT|wxALL, 8);
$self->{panel_header}->SetSizer($self->{sz_status_disp_toggle});
$self->{sizer_main}->Add($self->{panel_header}, 0, wxEXPAND, 0);
$self->{sz_name_address}->Add($self->{lbl_buyer}, 0, wxALL|wxEXPAND, 5);
$self->{sz_name_address}->Add($self->{lbl_address}, 1, wxALL|wxEXPAND, 5);
$self->{sz_name_addr_weight}->Add($self->{sz_name_address}, 1, wxEXPAND|wxRIGHT, 5);
$self->{sizer_7}->Add($self->{lbl_notes}, 0, wxALL|wxEXPAND, 5);
$self->{panel_notes}->SetSizer($self->{sizer_7});
$self->{sz_panel_notes}->Add($self->{panel_notes}, 1, wxALL|wxEXPAND, 5);
$self->{panel_hide_notes}->SetSizer($self->{sz_panel_notes});
$self->{sz_name_addr_weight}->Add($self->{panel_hide_notes}, 0, wxEXPAND|wxRIGHT, 5);
$self->{gsz_lbs_oz}->Add($self->{lbl_lbs}, 0, 0, 0);
$self->{gsz_lbs_oz}->Add($self->{lbl_oz}, 0, 0, 0);
$self->{gsz_lbs_oz}->Add($self->{tc_lbs}, 0, wxALIGN_RIGHT|wxBOTTOM|wxRIGHT|wxTOP, 5);
$self->{gsz_lbs_oz}->Add($self->{tc_oz}, 0, wxALIGN_RIGHT|wxBOTTOM|wxRIGHT|wxTOP, 5);
$self->{sz_weight}->Add($self->{gsz_lbs_oz}, 1, wxALIGN_RIGHT|wxALL, 5);
$self->{sz_weight_mail}->Add($self->{sz_weight}, 0, wxBOTTOM|wxEXPAND|wxRIGHT, 10);
$self->{sz_mail_hideButton}->Add($self->{choice_mailclass}, 1, wxALIGN_BOTTOM|wxALIGN_RIGHT|wxEXPAND|wxRIGHT, 5);
$self->{sz_mail_hideButton}->Add($self->{btn_send_email}, 0, wxALIGN_BOTTOM|wxALIGN_RIGHT|wxEXPAND|wxRIGHT, 5);
$self->{sz_mail_hideButton}->Add($self->{btn_hidenotes}, 0, wxALIGN_BOTTOM|wxALIGN_RIGHT|wxEXPAND, 0);
$self->{sz_weight_mail}->Add($self->{sz_mail_hideButton}, 0, wxBOTTOM|wxLEFT|wxRIGHT, 10);
$self->{sz_pkg_details}->Add($self->{dd_packaging}, 1, wxEXPAND, 0);
$self->{sz_pkg_details}->Add(5, 5, 0, 0, 0);
$self->{sz_pkg_details}->Add($self->{dd_bubble_wrap}, 1, wxEXPAND, 0);
$self->{sz_packaging_type}->Add($self->{sz_pkg_details}, 1, 0, 0);
$self->{sz_packaging_type}->Add($self->{btn_save_pkg}, 0, wxALIGN_BOTTOM|wxALIGN_RIGHT|wxEXPAND|wxLEFT|wxRIGHT, 5);
$self->{sz_weight_mail}->Add($self->{sz_packaging_type}, 1, wxBOTTOM|wxEXPAND|wxRIGHT, 10);
$self->{sz_name_addr_weight}->Add($self->{sz_weight_mail}, 0, wxEXPAND, 0);
$self->{sz_package_details}->Add($self->{sz_name_addr_weight}, 0, wxEXPAND, 5);
$self->{sz_grid_items}->Add($self->{grid_items}, 1, wxALL|wxEXPAND, 10);
$self->{panel_griditems}->SetSizer($self->{sz_grid_items});
$self->{sz_items}->Add($self->{panel_griditems}, 1, wxEXPAND, 5);
$self->{sz_package_details}->Add($self->{sz_items}, 1, wxALL|wxEXPAND, 5);
$self->{nb_individual_pane}->SetSizer($self->{sz_package_details});
$self->{sizer_nb_dom_pane}->Add($self->{grid_batch}, 1, wxBOTTOM|wxEXPAND|wxTOP, 5);
$self->{nb_batch_pane}->SetSizer($self->{sizer_nb_dom_pane});
$self->{sizer_2}->Add($self->{lbl_configuration_file}, 0, wxALL|wxEXPAND, 3);
$self->{sizer_2}->Add($self->{lbl_environment}, 0, wxALL|wxEXPAND, 3);
$self->{sizer_2}->Add($self->{lbl_database}, 0, wxALL|wxEXPAND, 3);
$self->{sizer_2}->Add($self->{lbl_database_type}, 0, wxALL|wxEXPAND, 3);
$self->{sizer_2}->Add($self->{lbl_user}, 0, wxALL|wxEXPAND, 3);
$self->{sizer_2}->Add($self->{lbl_password}, 0, wxALL|wxEXPAND, 3);
$self->{sizer_2}->Add($self->{lbl_installed_location}, 0, wxALL|wxEXPAND, 3);
$self->{sizer_1}->Add($self->{sizer_2}, 0, wxEXPAND|wxLEFT|wxTOP, 5);
$self->{sizer_3}->Add($self->{btn_config_file_chooser}, 0, wxALL, 3);
$self->{sizer_3}->Add($self->{dd_config_environment}, 0, wxALL, 3);
$self->{sizer_3}->Add($self->{tc_config_database}, 0, wxALL, 3);
$self->{sizer_3}->Add($self->{tc_config_db_type}, 0, wxALL, 3);
$self->{sizer_3}->Add($self->{tc_config_user}, 0, wxALL, 3);
$self->{sizer_3}->Add($self->{tc_config_password}, 0, wxALL, 3);
$self->{sizer_3}->Add($self->{tc_config_installed_location}, 0, wxALL, 3);
$self->{sizer_3}->Add($self->{btn_config_test}, 0, wxALL, 3);
$self->{sizer_1}->Add($self->{sizer_3}, 0, wxEXPAND|wxTOP, 5);
$self->{nb_configuration}->SetSizer($self->{sizer_1});
$self->{sizer_4}->Add($self->{lbl_log}, 0, wxALL|wxEXPAND, 5);
$self->{nb_log}->SetSizer($self->{sizer_4});
$self->{sizer_5}->Add($self->{tc_name_address}, 1, wxALL|wxEXPAND, 5);
$self->{nb_misc}->SetSizer($self->{sizer_5});
$self->{nb_main}->AddPage($self->{nb_individual_pane}, "Individual");
$self->{nb_main}->AddPage($self->{nb_batch_pane}, "Batch");
$self->{nb_main}->AddPage($self->{nb_configuration}, "Configuration");
$self->{nb_main}->AddPage($self->{nb_log}, "Log");
$self->{nb_main}->AddPage($self->{nb_misc}, "Misc");
$self->{sizer_main}->Add($self->{nb_main}, 1, wxALIGN_BOTTOM|wxEXPAND, 0);
$self->{sizer_buttons}->Add($self->{image_logo}, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND|wxFIXED_MINSIZE, 3);
$self->{sizer_buttons}->Add(20, 20, 1, wxEXPAND, 0);
$self->{sizer_buttons}->Add($self->{btn_stage}, 0, wxALIGN_RIGHT|wxALL|wxEXPAND, 2);
$self->{sizer_buttons}->Add($self->{btn_prev}, 0, wxALIGN_RIGHT|wxALL|wxEXPAND, 2);
$self->{sizer_buttons}->Add($self->{btn_next}, 0, wxALIGN_RIGHT|wxALL|wxEXPAND, 2);
$self->{sizer_buttons}->Add($self->{btn_print}, 0, wxALIGN_RIGHT|wxALL|wxEXPAND, 2);
$self->{sizer_main}->Add($self->{sizer_buttons}, 0, wxEXPAND, 0);
$self->SetSizer($self->{sizer_main});
$self->Layout();
$self->Centre();
# end wxGlade
}


################################################################################
sub __SetSwapImages {
  my $self = shift;

  # Set swap images
  for my $method ( keys %$images ) {                      # $images is a global has ref - see top of package
    for my $btn ( keys %{$images->{$method}} ) {

      my $image = "$images->{$method}->{$btn}";
      if (! -e $image) {
        $self->banner('warning',"Image file not found\n");
        $self->logit('warning',"Image file '$image' does not exist\n");
        next;
      }

      eval {
        $self->{$btn}->$method( Wx::Bitmap->new($image, wxBITMAP_TYPE_ANY) );
      };
      if($@)
      {
        $self->logit('warning',"Can't load image '$image'");
        $self->logit('warning',"Eval error message: $@");
        next;
      }

    }
  }

}


################################################################################
sub banner {
  my $self = shift;
  my ($type,$text);

  if ( @_ > 1) {
    ($type,$text) = @_;
  }
  else {
    $type = 'info';
    $text = shift;
  }
  $type = lc($type);

  my %colormap = (
        'red'     => 'error',
        'yellow'  => 'warning',
        'green'   => 'ok',
        'blue'    => 'info',
        'orange'  => 'note',
        'grey'    => 'misc',
      );

  my %color = (
        'error'     => [191,0,8],     # red
        'important' => [191,0,8],     # red
        'warning'   => [251,200,47],  # yellow
        'ok'        => [123,212,6],   # green
#        'info'      => [13,117,152],  # blue
        'info'      => [211,236,240],  # blue
#        'note'      => [240,96,0],    # orange
        'note'      => [211,236,240],  # blue
        'misc'      => [180,180,180], # grey 
      );

  $type = defined $colormap{$type} ? $colormap{$type} : $type;
  $type = defined $color{$type} ? $type : 'error';

	$self->{lbl_status}->SetBackgroundColour(Wx::Colour->new( @{$color{$type}} ));
  $self->{lbl_status}->ClearBackground();
	$self->{lbl_status}->SetLabel($text);
  $self->logit( $type, $text );
}


################################################################################
sub logit {
	my $self = shift;
  my $timestamp = strftime('%Y-%b-%d %H:%M:%S',localtime);
  my ($type, $text) = @_ > 1 ? @_ : ('misc',shift);
  $type = ucfirst($type);

  return unless $text;

  $text = "$timestamp - $type\n$text";

  print "$text\n";

  $self->{log_text} .= "$text\n" ;
  $self->{log_text} .= "\n" 
    if ( $self->{log_text} !~ /.*\n\n$/ ); # add another blank line unless there are already 2

  $self->{lbl_log}->SetLabel( $self->{log_text} );
}


################################################################################
sub btn_stage_onClick {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_stage_onClick <event_handler>
# end wxGlade

  # run staging program
#   my $cmd = "$program_stage_packages"; # stage everyone
#   $self->banner('Staging packages...');
# 
#   system( $cmd );
# 
#   if ( $? ) {
#     print "ERROR CODE: $?\n";
#     print "CMD: $cmd\n";
#     $self->banner('ERROR Staging packages.');
#     return;
#   }

  # TODO: change constructor to work something like this:
  #       Then I can take out all the checks for type, becuase packages is always current based on D/I button
  #       When D/I button changes, it points to the other list
  #          $self->{packages}->{D} = ShipItPackageList->new( dbh=>$self->{dbh}, type=>'D' );
  #          $self->{packages}->{I} = ShipItPackageList->new( dbh=>$self->{dbh}, type=>'I' );
  #          $self->{packages} = $type eq 'D' ? $self->{packages}->{D} : $self->{packages}->{I}
  #

  # Get all staged packages from database
  my $dbms = lc($self->{cfg}->{db_dbms});
  my $cmd = "type sql\\$dbms\\stage_all.sql";    # TODO: use File::Slurp?
  my $sql_stage_all = `$cmd`;
  my $package_list = ShipItPackageList->new( dbh=>$self->{dbh}, sql=>$sql_stage_all );

  $self->banner( 'note', "\nLoading Orders Awaiting Shipment....." ); 
  eval {
    $package_list->load( $self->{cfg}, $self );
  };
  if($@) {
    $self->warning_dialog( "ERROR: Staging failed. \n $@" ); 
    croak;
  }

  $self->{package_list}    = $package_list;
  $self->{packages}->{ALL} = $package_list->packages_ary;
  $self->{packages}->{D}   = [ grep {$_->dom_intl_flag eq 'D' } @{$self->{packages}->{ALL}} ];  # D-Domestic packages
  $self->{packages}->{I}   = [ grep {$_->dom_intl_flag eq 'I' } @{$self->{packages}->{ALL}} ];  # I-International packages

	if (! @{$self->{packages}->{ALL}} ) {
		$self->banner('warn','Warning: No Packages to Stage');
		return 1;
	}

  # Set index to the first package in each list
	$self->{current_package_idx}->{D} = 0; 
	$self->{current_package_idx}->{I} = 0;

  # Enable weight controls if there were packages staged
# 	if ( scalar  @{$self->{packages}->{D}} ) {
    $self->{tc_lbs}->Enable(1);
    $self->{tc_oz}->Enable(1);
# 	}

  # Populate display if we are on a display screen (i.e. not config or log)
  $self->populate_batch_page()
    if ( $self->{display_page} && $self->{batchmode} );

  $self->populate_single_page()
    if ( $self->{display_page} && ! $self->{batchmode} );

  $self->{last_staged_date} = strftime('%Y-%b-%d %H:%M:%S',localtime);
  $self->logit("All records staged at $self->{last_staged_date}");
  $self->{statusbar}->SetStatusText("Last Staged date: ", $self->{last_staged_date});

  # Populate single package details drop down menus
  $self->populate_dd_packaging_defaults()  if ( ! $self->{batchmode} );
}

sub populate_dd_packaging_defaults {
  my $self = shift;
  my $dd   = $self->{dd_packaging};
  my $sth;
  my $sql = q/select package+' '+package_type as package_type_name from ttb_package_types/;

  eval {
    $sth = $self->{dbh}->prepare( $sql ) or die "can't prepare sql to get location data";
    $sth->execute() or die "can't execute sql to get location data";
  };
  if ($@) {
    die "\n\nERROR: $@";
  }

  my $all_types = $sth->fetchall_hashref('package_type_name');
  $sth->finish();

  $dd->Clear();
  $dd->Append('Choose Package Type');

  my $maxwidth = 15;
  for my $type ( sort keys %{$all_types} ) {
    $dd->Append($type);
    my $width = length($type);
    $maxwidth = $width if ($width > $maxwidth)
  }
  
  $dd->SetSelection(0);
  $dd->SetMinSize(Wx::Size->new(-1,$maxwidth));
}

################################################################################
sub populate_single_page {
  my $self = shift;
  my $type = $self->{type};

  # Single Label Mode (display individual package information)

  # Create a short cut to the current package 
  $self->{pkg} = $self->{packages}->{$type}->[ $self->{current_package_idx}->{$type} ];
  my $pkg      = $self->{pkg};

  if ( ! $pkg ) {
    $self->banner('warn','No Packages staged');
    return 0;
  }

  $self->banner($pkg->status_type, $pkg->status_text );

  # Labels
  $self->{lbl_buyer}->SetLabel(   $pkg->buyer   );
  $self->{lbl_address}->SetLabel( $pkg->address );
  $self->{lbl_notes}->SetLabel(   $pkg->notes   );
  $self->{lbl_notes}->Wrap( 500 );

  # Text Controls
  $self->{tc_lbs}->SetValue( $pkg->weight_lbs );
  $self->{tc_oz}->SetValue(  $pkg->weight_oz  );
  $self->{tc_oz}->SetFocus();
  $self->{tc_oz}->SetSelection(-1,-1);

  # populate name/address text control on email tab (allow user to copy/paste when printing envelopes)
  $self->{tc_name_address}->SetValue( $pkg->buyer . "\n" . $pkg->address);

  # Populate Mail class drop down and reset to default (First Class)
	$self->{choice_mailclass}->Clear();
	for my $mc ( @{$self->{mail_map_keys}->{$type}} ) {
    $self->{choice_mailclass}->Append($mc);
	}

  # Note: This changes the value in the drop down, but it does NOT change the mail class
  if ( $self->{type} eq 'I' ) {                     # International
    if ( $self->isEPacketEligible($pkg->countryname) ) {
 	    $self->{choice_mailclass}->SetSelection(1);   # E-Packet
    }
    else {
 	    $self->{choice_mailclass}->SetSelection(0);   # IPA (Default)
    }
  }
  else {
    # TODO: if they selected priority, this should default to priority
	  $self->{choice_mailclass}->SetSelection(0);   # Domestic first class (default)
  }

  # Show Notes (if there are notes show panel, else hide panel)
  if ( $pkg->notes ) {
    $self->btn_hidenotes_evtButton(0)
      if ( ! $self->{panel_notes_toggle} );
  }
  else {
    $self->btn_hidenotes_evtButton(0)
      if ( $self->{panel_notes_toggle} );
  }


  # Add or delete rows in items grid
  my $grid           = $self->{grid_items};
  my $current_rows   = $grid->GetNumberRows();
  my $rows_needed    = scalar @{$pkg->items};
  $grid->DeleteRows(1, $current_rows -1);    # Delete existing rows (leave 1 row, otherwise events get triggered when you reinsert)
  $grid->InsertRows(1, $rows_needed -1)      # Add only the number of rows we need
    if ($rows_needed>0);              
  $grid->ClearGrid();
  $grid->SetDefaultRowSize( $self->{default_rowsize},1); # 150-RowHeight, 1-resizeExistingRows true

  # Populate items grid and 
  my $row=0;
  for my $item ( @{$pkg->items} ) {
    if ( ! $item->image ) {
      my $url = $item->image_url;
      my $image_name = $url;

      #print "\nIMAGE: $image_name";
      if ( $image_name =~ /^http.*?=.*/ ) {
        $image_name =~ s#^http.*?=/##;
        $image_name =~ s#/#_#g;
      }

      $image_name =~ s#.*/##;
      $image_name =~ s#\?.*$##;
      $image_name = "$image_cache/$image_name";

      # get image if from image host, it's not already cached
      my $status;
      if ( ! -f $image_name ) {
        $status = getstore($item->image_url, $image_name);
      }

      if ( -f $image_name || is_success($status) )  {
        # Store BitMap image
	      my $image = Wx::Image->new($image_name, wxBITMAP_TYPE_ANY );
	      my $h = $image->GetHeight();
	      my $w = $image->GetWidth();
	      my $max = $self->{default_rowsize};
	      if ( $h > $w ) {
						my $aspect_ratio = $w/$h;
						$h = $h > $max ? $max : $h;
						$w = $h * $aspect_ratio;
	      }
        else {
            my $aspect_ratio;
            eval {
              $aspect_ratio = $h/$w;
              $w = $w > $max ? $max : $w;
              $h = $w * $aspect_ratio;
            };
            if ($@) {
              $|=1;
              $self->{cfg} = '';
              print Dumper($self);
              print "\n\nIMAGE FILE: $image_name \n\n";
              #exit; #TODO: rescale will fail...
            }
        }
				$image->Rescale($w,$h);
	      $item->image( Wx::Bitmap->new( $image ) );
      }
      else {
        # assign filler image
        $item->image( $self->{missing_image} );
      }
    }

    # highlight every other row
    my $row_color; 
    if ( ($row%2) == 0 ) {
      $grid->SetRowAttr( $row, $self->{gi_attr_default} ); 
      $row_color =  Wx::Colour->new('WHITE');
    }
    else {
      $grid->SetRowAttr( $row, $self->{gi_attr_hl} );
      $row_color =  Wx::Colour->new('LIGHT BLUE');
    }
    $grid->SetCellBackgroundColour( $row, 1, $row_color );

    # Display Image
    $grid->SetCellRenderer( $row, 0, MyFrame::customImageRenderer->new( $item->image, $row) );

    $grid->SetCellRenderer( $row, 3, Wx::GridCellAutoWrapStringRenderer->new() ); # Wrap Title column
    $grid->SetCellRenderer( $row, 4, Wx::GridCellAutoWrapStringRenderer->new() ); # Wrap Packaging column

    # Set cell values
    $grid->SetCellValue( $row, 1, $item->qtysold			);
    $grid->SetCellValue( $row, 2, $item->variation		);
    $grid->SetCellValue( $row, 3, $item->title				);
    $grid->SetCellValue( $row, 4, $item->packaging   );
    $grid->SetCellValue( $row, 5, $item->bubble_wrap  );
    $grid->SetCellValue( $row, 6, $item->packaged_weight  );

    # Highlight quantity if it's greater than 1
    if ( $item->qtysold > 1 ) {
      $grid->SetCellBackgroundColour( $row, 1, Wx::Colour->new('YELLOW') );
    }

    if ( $row == 0 ) {
      $self->{dd_packaging}->SetSelection(0);
      $self->{dd_packaging}->SetStringSelection($item->packaging);
      $self->{dd_packaging}->Enable(1);

      $self->{dd_bubble_wrap}->SetSelection(0);
      $self->{dd_bubble_wrap}->SetStringSelection($item->bubble_wrap);
      $self->{dd_bubble_wrap}->Enable(1);

      $self->{btn_save_pkg}->Enable(1);
    }
    else {
      # If there's more than one item, then disable the the packaging controls
      $self->{dd_packaging}->SetSelection(0);
      $self->{dd_packaging}->Enable(0);
      $self->{dd_bubble_wrap}->SetSelection(0);
      $self->{dd_bubble_wrap}->Enable(0);
      $self->{btn_save_pkg}->Enable(0);
    }

    $row++;
  }

#  $grid->AutoSizeRows();
  $grid->SetDefaultRowSize( $self->{default_rowsize},1); # 150=>RowHeight, 1=>resizeExistingRows=true
  #$grid->AutoSizeColumns();
  $grid->SetColSize(0, $self->{default_rowsize} );
  $grid->AutoSizeColumn(2,0);
  $grid->SetColSize(3,700);
  $grid->AutoSizeColumn(4,10);
  $grid->AutoSizeColumn(5,0);
  $grid->AutoSizeColumn(6,0);
  $grid->Refresh();

  $self->set_buttons()
}

################################################################################
sub populate_batch_page {
  my $self     = shift;
  my $type     = $self->{type};
  my $grid     = $self->{grid_batch};

  # store temp value, because when the grid gets redrawn it triggers the cell/row change events which change the current idx
  my $current_package_idx = $self->{current_package_idx}->{$type};

  # Set correct number of rows in the grid
  my $num_packages   = scalar @{ $self->{packages}->{$type} };
  my $num_rows       = $grid->GetNumberRows();
	$grid->DeleteRows(1, $num_rows -1);      # Delete existing rows (leave 1 row, otherwise events get triggered when you reinsert)
	$grid->InsertRows(1, $num_packages -1)   # Add rows
    if ($num_packages>0);              
  $grid->ClearGrid();

  my ($col_id, $col_desc, $col_lbs, $col_oz) = (0,1,2,3);
  for ( my $row=0 ; $row < $num_packages ; $row++ )
  {
    my $pkg = $self->{packages}->{$type}->[$row];

    $grid->SetCellValue( $row, $col_id,   $pkg->id );
    $grid->SetCellValue( $row, $col_desc, $pkg->firstname . ', ' . $pkg->lastname );
    $grid->SetCellValue( $row, $col_lbs,  $pkg->weight_lbs );
    $grid->SetCellValue( $row, $col_oz,   $pkg->weight_oz );

    # highlight every other row
    ($row%2) == 0 
      ? $grid->SetRowAttr( $row, $self->{attr_default} )
      : $grid->SetRowAttr( $row, $self->{attr_hl} ) ;

    # set id and description columns to read only
    $grid->SetReadOnly( $row, $col_id,   1 ); 
    $grid->SetReadOnly( $row, $col_desc, 1 );
  }

  # Set emphasize on the current record postion
  $self->{current_package_idx}->{$type} = $current_package_idx;
  my $rownum = $current_package_idx;
  $grid->SetFocus;
  $grid->SetGridCursor($rownum, 3);
  $grid->SetRowAttr(   $rownum, $self->{attr_emphasis} );
  $self->{emphasis_row} = $rownum;

  # Auto size rows/columns
  $grid->AutoSizeRows;
  $grid->AutoSizeColumns;

  $self->set_buttons();
}


################################################################################
sub btn_prev_onClick {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_prev_onClick <event_handler>
# end wxGlade
  $self->{current_package_idx}->{ $self->{type} } -= 2; # subtract 2 because it gets incremented again in btn_next_onClick()
  $self->btn_next_onClick(0);    # have to pass a value in lieu of an event obj
}


################################################################################
sub btn_next_onClick {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_next_onClick <event_handler>
# end wxGlade
  my $type = $self->{type};

	# Clean up files left by any other process (Start Clean!)
	$self->archive_files();

  $self->{current_package_idx}->{$type}++;

  if ( $self->{batchmode} ) {
    # Highlight next row - increase font size. set prev row back to normal
    1;
  }
  else {
    $self->populate_single_page();
  }

  $self->set_buttons();
}


################################################################################
sub set_buttons {
  my $self = shift;
  my $type = $self->{type};

  # Enable/Disable buttons
  $self->{btn_print}->Enable(0);

  if ( $self->{current_package_idx}->{$type} == 0 ) {                                            # First package
    $self->{btn_prev}->Enable(0);
    $self->{btn_next}->Enable(1);
  }
  elsif ( $self->{current_package_idx}->{$type} == @{$self->{packages}->{$type}}-1 ) { # Last package
    $self->{btn_prev}->Enable(1);
    $self->{btn_next}->Enable(0);
  }
  else {
    $self->{btn_prev}->Enable(1);
    $self->{btn_next}->Enable(1);
  }
}


################################################################################
sub btn_print_onClick {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_print_onClick <event_handler>
# end wxGlade

  if ( ! $self->{last_staged_date} ) {
    $self->banner('No packages staged');
    sleep 1;
    return 1;
  }

  # Print Label
  #   - Currently supporting two ways (1) Create XML file for Dazzle  
  #                                   (2) Call Endicia API
  #
  if ( $self->{pkg}->dom_intl_flag eq 'I' ) {  
#  if (1) {
    # API based processing
    $self->banner('note','Calling Endicia GetPostageLabel API...'); # Input to postage software
    my $objEndiciaCall = EndiciaAPICall->new( environment=>$self->{environment} );
    $self->{pkg}->date_advance( $self->{DateAdvance} );

    eval {
      $objEndiciaCall->PrintLabel( $self->{pkg}, $self->{postal_cfg} );
    };
    if($@) {
      $self->banner('error','Error in API call or printing label'); # Input to postage software
      $self->warning_dialog( "ERROR: Endicia API Call error. \nError Message: $@" ); 
      $self->{pkg}->status('PE');
      # die $@;
      return 1;
    }

    if ( ! $objEndiciaCall->TrackingNumber ) {
      $self->banner('error','API call did not return tracking number'); # Input to postage software
      $self->warning_dialog( "ERROR: Endicia API Call did not return tracking number. If the label printed correctly, you should manually update tracking number on ebay/amazon"); 
    }

    # update package
    $self->{pkg}->tracking_number( $objEndiciaCall->TrackingNumber );
    $self->{pkg}->shipping_cost( $objEndiciaCall->ActualPostageCost );

    return 1
      if ( $self->updTrackingForPackage($self->{pkg}) );
  }
  else {
    # Dazzle - XML File based processing
    $self->banner('Creating XML file...'); # Input to postage software

    return 1 
      if ( $self->createXML() );

    ### TODO: How can the user try to update the tracking numbers again?
    ###       DUMP LOTS MORE INFO TO THE LOG IF TRACKING FAILS - All file names / locations / statuses / etc. !!!
    $self->banner('XML file created. Waiting for tracking number file...');

    return 1
      if ( $self->updTracking );
  }

  # If we get to this point the status is okay and the tracking has been updated
	$self->banner('ok','Tracking updated on Ebay');
	sleep(1);

	# disable print button after printing
	$self->{btn_print}->Enable(0);

  # go to the next record, unless record failed (or we are at the last records already)
  $self->btn_next_onClick(0) 
    if ( $self->{current_package_idx}->{ $self->{type} } < @{$self->{packages}->{ $self->{type} }}-1 );
}


################################################################################
# ENDICIA
################################################################################
sub createXML() {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_createXML_Clicked <event_handler>
# end wxGlade
  my $type   = $self->{type};       # D/I
  my $layout = $type eq 'D' 
             ? $self->{postal_cfg}->{DomLabelLayout}
             : $self->{postal_cfg}->{IntlLabelLayout};

  # Reformat package object into a hash that will output correctly to XML
  my $pkg={};

	$pkg->{DAZzle} = {
    Layout      => $layout,
		OutputFile  => "$self->{postal_cfg}->{returndir}/$self->{postal_cfg}->{returnfile}",
		Start				=> 'PRINTING',		# A value of 'DAZ' triggers the address verification process
		Test        => 'NO',					# TODO: set to 'YES' For TESTING ONLY
		Prompt			=> 'NO',
	 	AutoClose		=> 'NO',
    AutoPrintCustomsForms => 'YES',
		AbortOnError => 'YES',

		# mail cutoff time?
		# send notification?
	};

	$pkg->{DAZzle}->{Package} = [];

  for my $p ( @{$self->{packages}->{$type}} ) {
    next unless ( $p->status eq 'WC' ); # Weight Changed
    $p->status('XS');                   # XML process Started

		# strip 'TTY' from the from of 'id'
		my $id = $p->id;
		$id =~ s/^\w{3}//;

		# Notes on XMLout: 
		#   value type                      Results in
		#   -----------------------------   ----------------------------------------------------
		# 	Key => 'value' 					      : Attribute (not a tag) i.e.  <Tag Key="value">    or I guess you can always use a hash ref...
		# 	Key => { k1=>val1, k2=>val2 }	: Multiple attributes   i.e.  <Key k1="val1" k2="val2">
		# 	Key => [ 'TRUE' ]             : Tag named 'Key'       i.e.  <Key>TRUE</Key>

    my $Package = {
			ID 					=> $id,   							# Single attribute (not a tag). Array references turn into tags. Use a hash reference to get multiple attributes.
			ReferenceID => [ $p->id ],				  # TTY123456

			# ONLY if International package w/'IPA' Mailclass
			IsConsolidatorLabel	=> $type eq 'I' ? [ 'TRUE' ] : ['FALSE'],

			MailClass		=> [ $p->mailclass ],   # 'IPA' for International Consolidator
			PackageType	=> [ $p->mailpiece ],   # 'RECTPARCEL' for International Consolidator
			Width 			=> [ '5' ],
			Length			=> [ '10' ], 
			Depth 			=> [ '10' ],
			OversizeRate=> [ 'FALSE' ],
			WeightOz		=> [ $p->total_weight_oz  ],
			DateAdvance	=> [ $self->{DateAdvance} ],
      Value       => [ $p->total_price ],
      Description => [ 'Childs Toy' ],
      Stealth     => [ 'TRUE' ],
#			ReturnToSender => [ 'TRUE' ],  # 2014/08/21 - XML Spec changed. ReturnToSender replaced by ifNonDeliverable
			ifNonDeliverable => [ 'TRUE' ],

			Services 		=> {
#				 DeliveryConfirmation => 'ON',  # 2014/08/21 - XML Spec changed. DeliveryConfirmation replaced by USPSTracking
				 USPSTracking => 'ON',
				 InsuredMail => 'OFF',					# NOTE: USPS Insurance is not allowed with Stealth=TRUE
				 RegisteredMail => 'OFF',
				 CertifiedMail => 'OFF',
				 RestrictedDelivery => 'OFF',
				 CertificateOfMailing => 'OFF',
				 ReturnReceipt => 'OFF',
				 SignatureConfirmation => 'OFF',
				 COD => 'OFF',
		  },

      CustomsFormType     => [ 'CN22' ],
      CustomsQuantity1    => [ '1' ],
      CustomsWeight1      => [ $p->total_weight_oz ],
      CustomsValue1       => [ $p->total_price ],
      CustomsDescription1 => [ 'Childs Toy' ],
			ContentsType        => [ 'MERCHANDISE' ],
      CustomsCountry1     => [ $p->country ],
      CustomsCertify      => [ 'TRUE' ],								
      CustomsSigner 		  => [ 'Amy Sepelis' ],

      ToName              => [ $p->firstname .' '. $p->lastname ],
      ToAddress1          => [ $p->addressline1  ],
      ToAddress2          => $p->addressline2 ? [ $p->addressline2 ] : [''],
      ToAddress3          => $p->addressline3 ? [ $p->addressline3 ] : [''],
      ToCity              => [ $p->city ],
      ToState             => [ $p->state ],
      ToPostalCode        => [ $p->zip  ],
      ToCountry           => [ $p->countryname  ],
      ToEMail             => [ $p->emailaddress ],
      ToPhone             => [ $p->phonenumber ],
	  };

    push ( @{ $pkg->{DAZzle}->{Package} }, $Package );
  }

  # Output XML file using XML::Simple->XMLout
  my $xml = XMLout( $pkg, RootName=>undef );

  # Write XML file to disk
  my $inputfile = "$self->{postal_cfg}->{inputdir}/$self->{postal_cfg}->{inputfile}";
  open my $xml_fh, '>', $inputfile or die "cant write file '$inputfile'";
  print $xml_fh $xml;
  close $xml_fh;

	return 0;
}


################################################################################
# STAMPS.COM
################################################################################
sub createXML_stamps() {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_createXML_Clicked <event_handler>
# end wxGlade
  my $type = $self->{type};       # D/I

  # Reformat package object into a hash that will output correctly to XML
  my $pkg={};
  $pkg->{Configuration} = {};
  $pkg->{Layout}        = {};
  $pkg->{Item}          = [];

  my $Configuration = $pkg->{Configuration};
  my $Layout        = $pkg->{Layout};

  # Configuration
  $Configuration->{MailingCutoffTime} = '17:00:00';
  $Configuration->{RecipientEmailOptions}->{ShipmentNotification} = 'true';
  #$Configuration->{RecipientEmailOptions}->{ShipmentNotification}->{companyInSubject} = 'true'; # attribute
  #$Configuration->{RecipientEmailOptions}->{ShipmentNotification}->{fromCompany}      = 'true'; # attribute
  $Configuration->{ResultFile} = $self->{postal_cfg}->{returndir} . '/' . $self->{postal_cfg}->{returnfile};

  #$Configuration->{Sample} = 'true';      # TODO: for testing!!!!

  # Layout
  $Layout->{Desired}->{PaperID} = 1;

  for my $p ( @{$self->{packages}->{$type}} ) {
	  #print "Package Status: ",$p->status,"\n";
    next unless ( $p->status eq 'WC' ); # Weight Changed
    $p->status('XS'); # XML process Started

    my $Package;

    # Item
    $Package->{HidePostageAmount} = 'true';

    $Package->{BillingAddress}->{AddressFields}->{FirstName}  = $p->firstname;
    $Package->{BillingAddress}->{AddressFields}->{LastName}   = $p->lastname;
    $Package->{BillingAddress}->{AddressFields}->{MultilineAddress}      = [{Line=>$p->addressline1}];
    push ( @{$Package->{BillingAddress}->{AddressFields}->{MultilineAddress}}, {Line=>$p->addressline2} ) if $p->addressline2;
    push ( @{$Package->{BillingAddress}->{AddressFields}->{MultilineAddress}}, {Line=>$p->addressline3} ) if $p->addressline3;
    $Package->{BillingAddress}->{AddressFields}->{City}       = $p->city;
    $Package->{BillingAddress}->{AddressFields}->{Country}    = $p->countryname;
    $Package->{BillingAddress}->{AddressFields}->{OrderedPhoneNumbers}   = [{Number=>$p->phonenumber}];
    $Package->{BillingAddress}->{AddressFields}->{OrderedEmailAddresses} = [{Address=>$p->emailaddress}];
    $Package->{BillingAddress}->{AddressFields}->{PostalCode} = $p->zip;
    $Package->{BillingAddress}->{AddressFields}->{Province}   = $p->state;

    $Package->{OrderContents}->{Package}->{ExternalID} = 123;
    $Package->{OrderContents}->{Package}->{Name}       = 'Toy';
    $Package->{OrderContents}->{Package}->{Quantity}   = 1;
    $Package->{OrderContents}->{Package}->{Price}      = $p->total_price;
    $Package->{OrderContents}->{Package}->{Total}      = $p->total_price;

    $Package->{OrderDate} = 'today';
    $Package->{OrderID}   = $p->id;                

#    $Package->{PackageDimensionsValue}->{PackageDimensions}->{Height} = 10; # TODO: L/W/H were attributes, problem?
#    $Package->{PackageDimensionsValue}->{PackageDimensions}->{Length} = 10;
#    $Package->{PackageDimensionsValue}->{PackageDimensions}->{Width} = 5;
    $Package->{PackageDimensions} = '';

    $Package->{MailClass} = $p->mailclass;              # TODO: not working when priority is selected BY THE BUYER however the dropdown works
                                                        # I THINK THIS IS WORKING NOW 2/16/2013
    $Package->{Mailpiece} = $p->mailpiece;

    # TODO: This might not work in BATCH MODE, because it will set the printer of every package...
    # TODO: Is 'package' the correct mailpiece?
    if ( $p->mailclass eq 'international priority'  &&
         $p->mailpiece eq 'package'  &&
	       $type eq 'I' ) {
      $Configuration->{DesiredPrinter}->{Name} = $self->{postal_cfg}->{internationalPriorityPrinter};
      $Configuration->{DesiredPrinter}->{Bin} = $self->{postal_cfg}->{internationalPriorityPrinterBin};
    }

    $Package->{NonDeliveryOption} = 'return to sender';

    $Package->{Recipient}->{AddressFields}->{FirstName}  = $p->firstname;
    $Package->{Recipient}->{AddressFields}->{LastName}   = $p->lastname;
    $Package->{Recipient}->{AddressFields}->{MultilineAddress} = [{Line=>$p->addressline1}];
    push ( @{$Package->{Recipient}->{AddressFields}->{MultilineAddress}}, {Line=>$p->addressline2} ) if $p->addressline2;
    push ( @{$Package->{Recipient}->{AddressFields}->{MultilineAddress}}, {Line=>$p->addressline3} ) if $p->addressline3;
    $Package->{Recipient}->{AddressFields}->{City}       = $p->city;
    $Package->{Recipient}->{AddressFields}->{Country}    = $p->countryname;
    $Package->{Recipient}->{AddressFields}->{OrderedPhoneNumbers}   = [{Number=>$p->phonenumber}];
    $Package->{Recipient}->{AddressFields}->{OrderedEmailAddresses} = [{Address=>$p->emailaddress}];
    $Package->{Recipient}->{AddressFields}->{PostalCode} = $p->zip;
    $Package->{Recipient}->{AddressFields}->{Province}   = $p->state;

    $Package->{Sender}->{Company}   = 'The Teaching Toy Box';
    $Package->{Sender}->{FirstName} = 'Amy';
    $Package->{Sender}->{LastName}  = 'Sepelis';
    $Package->{Sender}->{MultilineAddress}->{Line} = '1157 Verona Ridge Dr.';
    $Package->{Sender}->{City}      = 'Aurora';
    $Package->{Sender}->{State}     = 'IL';
    $Package->{Sender}->{ZIP}       = '60506';
    $Package->{Sender}->{OrderedPhoneNumbers} = [{Number=>'(630)815-4915'}];  # Amy's phone number

    # $Package->{Services}->{DeliveryConfirmation}  = 'true'; # 2014/08/21 - XML Spec changed. DeliveryConfirmation replaced by USPSTracking
    $Package->{Services}->{USPSTracking}  = 'true';
    $Package->{Services}->{SignatureConfirmation} = 'false';

    $Package->{WeightLb} = $p->weight_lbs;
    $Package->{WeightOz} = $p->weight_oz;

    $Package->{CustomsInfo}->{Contents}->{Item}->{Description} = 'TOY';
    $Package->{CustomsInfo}->{Contents}->{Item}->{Quantity}    = 1;
    $Package->{CustomsInfo}->{Contents}->{Item}->{WeightLb}    = $p->weight_lbs;
    $Package->{CustomsInfo}->{Contents}->{Item}->{WeightOz}    = $p->weight_oz;
    $Package->{CustomsInfo}->{Contents}->{Item}->{CountryOfOrigin} = $p->country;  # abbr.
    $Package->{CustomsInfo}->{Contents}->{Item}->{Value} = $p->total_price;
		# TODO: test Other vs Merchandise on Intl packages
    $Package->{CustomsInfo}->{ContentsType}      = 'Merchandise';
#    $Package->{CustomsInfo}->{ContentsType}      = 'Other';
    $Package->{CustomsInfo}->{OtherContentsInfo} = 'TOY';
    $Package->{CustomsInfo}->{DeclaredValue}     = $p->total_price;
    $Package->{CustomsInfo}->{UserAcknowledged}  = 'true';

    push ( @{$pkg->{Item}}, $Package );
  }

  # Output XML file using XML::Simple->XMLout
  my $xml = XMLout( $pkg, NoAttr=>1, RootName=>undef, KeyAttr=>{});
  $xml = '<?xml version="1.0" encoding="UTF-8"?>  
<Print xmlns="http://stamps.com/xml/namespace/2009/8/Client/BatchProcessingV1">
' . $xml . '
</Print>
';

  # Add Atrributes (since we are setting the 'NoAttr' flag when using XMLout()
  $xml =~ s/<PackageDimensions>/<PackageDimensions Length="10" Width="5" Height="10">/;

  # Write XML file to disk
  my $inputfile = "$self->{postal_cfg}->{inputdir}/$self->{postal_cfg}->{inputfile}";
  open my $xml_fh, '>', $inputfile or die "cant write file '$inputfile'";
  print $xml_fh $xml;
  close $xml_fh;

	return 0;
}


################################################################################
sub yes_no_dialog {
	my ($self, $message) = @_;
  my $answer = Wx::MessageBox( $message, 'Please Respond', wxYES_NO|wxCENTRE, undef);
	return ($answer == wxYES) ? 1 : 0;
}


################################################################################
sub warning_dialog {
	my ($self, $message) = @_;
  my $msgbox = Wx::MessageDialog->new( $self, $message, 'WARNING', wxOK|wxICON_EXCLAMATION );
  $msgbox->ShowModal();
	return 0;
}


################################################################################
sub updTrackingForPackage {
	my ($self, $package) = @_;

  if ( $self->{environment} ne 'production' ) {
    $self->banner('info',"Dev - Skipping tracking update");
    sleep 5;
    return 0;
  }

  my $api = $self->{api};   # Ebay API to update tracking

  # Set package level info
  $api->packageID        ( $package->id               );  # TTY123456
  $api->trackingNumber   ( $package->tracking_number  ); 
  $api->actualPostageCost( $package->shipping_cost    );  # Not currently used 
  $api->firstname        ( $package->firstname        );  # Not currently used
  $api->lastname         ( $package->lastname         );  # Not currently used

  # Loop over Items in package and update the tracking number for each item
  # TODO: there is a way to make one call per order id instead of for each item, but
  #       I think there was an issue if I combined multiple orders into one package
  #       maybe I'm only keeping the last order id or something?
  for my $item ( @{$package->items} ) { 
    # populate api object, item level info
    $api->ebay_item_id       ( $item->ebayItemID        );
    $api->ebay_transaction_id( $item->ebayTransactionID );

    # Make call to Ebay API HERE to Update Tracking
    eval { 
      $api->sendRequest();
    };
    if ($@) { 
      $self->warning_dialog( 'ERROR: Failed when sending ebay api request to update tracking number. Update Manually.'); 
      # Update Item status: T-sucessful TF-tracking failed
      $item->status('TF');
    }
    else {
      # Update Item status: T-sucessful TF-tracking failed
      $item->status('T');
    }
  }
}

################################################################################
sub updTracking {
	my ($self, $event) = @_;

  if ( $self->{environment} ne 'production' ) {
    # Clean up files
    $self->archive_files();
    $self->banner('info',"Dev - Skipping tracking update");
    sleep 5
  }

  my $api        = $self->{api};
  my $returnfile = "$self->{postal_cfg}->{returndir}/$self->{postal_cfg}->{returnfile}";
  my $inputfile  = "$self->{postal_cfg}->{inputdir}/$self->{postal_cfg}->{inputfile}";
  (my $statusfile = $inputfile) =~ s/\.xml$//;
  my $wait_time;
  my $xml;

  # Wait for return file, when found, parse xml file into $xml hash
  WAIT_FOR_RETURN_FILE:
  if ( -f $returnfile ) {
    # Try to parse return file (fail after 2nd try)
    my $tryxml=0;
    TRYXML:
    eval { $xml = XMLin($returnfile, ForceArray=>['Package']); };
    if ($@) { 
      if ( $tryxml++ > 0 ) { 
        $self->warning_dialog( 'ERROR: could not parse return file! Update tracking number MANUALLY.' ); 
        return 0;
      }
      $self->warning_dialog( 'ERROR: could not parse return file! Click OK to try again.' ); 
      goto TRYXML;
    }
  }
  else {
    # wait for return file (30 seconds (thats 15 x 2 second sleep time) )
    if ( $wait_time++ > 15 ) {
      if ( $self->yes_no_dialog("No file returned from Endicia. \nDo you want to continue waiting?") ) {
        $wait_time=10;
      }
      else {
	      $self->archive_files();
        return 1;
      }
    }
    sleep 2;
    goto WAIT_FOR_RETURN_FILE;
  }

  # Process the packages in the return file, get the status and tracking info
  for my $pkg ( @{ $xml->{Package} } ) 
  {
    # Check Return status
    my $status = $pkg->{Status};
    
    if ( $status =~ /.*reject.*/i ) {
      (my $reject_code = $status ) =~ /.*reject\s+\((.*)\)/i;

      if ( $reject_code ) {
        # DAZzle XML interface Appendix Table 6
        my $all_error_msg = {
           0 => 'Success -- no errors during processing ' 
          -3 => 'Address Verification failed (return code less than 25) '
          -4 => 'Unsupported mail class for international mail or invalid weight/rate values '
          -5 => 'Express Mail International error -- either no "to phone" or "to e-mail" address '
          -6 => 'USPS Delivery Confirmation error -- denied, service unavailable or communication error '
          -7 => 'USPS Express Mail error -- denied, service unavailable or communication error '
          -8 => 'USPS Customs Forms error -- denied, service unavailable or communication error '
          -9 => 'International Mail Shipping Label (large or small) processing error '
         -10 => 'CONFIRM service error -- denied, service unavailable or communication error '
        };
        my $errmsg = $all_error_msg->{ $reject_code };
        $self->warning_dialog("Unexpected Print Result! \n\nStatus: $status \nError Message: $errmsg");
        return 1;   # TODO: Not sure this will work in BATCH MODE (maybe just a 'next' here)
      }
    }

    # Verify a tracking number was returned
    my $TrackingNumber = $pkg->{PIC};
		if (! $TrackingNumber ) {
      $self->warning_dialog('No Tracking Number in the file returned from Endicia!');
      return 1;   # TODO: Not sure this will work in BATCH MODE (maybe just a 'next' here)
    }

    # Set package level info
    $api->packageID        ( $pkg->{ReferenceID}            );  # TTY123456
    $api->trackingNumber   ( $TrackingNumber                ); 
    $api->actualPostageCost( $pkg->{FinalPostage} || int('0')   );  # Not currently used 
                                                                # TODO: Do we get the cost back when using an international consolidator?
    $api->firstname        ( $pkg->{ToName} || ' '          );  # Not currently used
    $api->lastname         ( ' '                            );  # Not currently used

    # Get package based on the OrderID from the return file
    my $package = $self->{package_list}->packages_byID->{ $api->packageID };

    die "OrderID '$api->{packageID}' from the Endicia return file NOT found in package list"
      if ( ! $package );

    # Loop over Items in package and update the tracking number for each item
    for my $item ( @{$package->items} ) { 
      # populate api object, item level info
      $api->ebay_item_id       ( $item->ebayItemID        );
      $api->ebay_transaction_id( $item->ebayTransactionID );

      #
      # Make call to Ebay API to Update Tracking
      #
      eval { 
        if ( $self->{environment} eq 'production' ) {
          $api->sendRequest();
        }
      };
      if ($@) { 
        $self->warning_dialog( 'ERROR: Failed when sending ebay api request to update tracking number. Update Manually.'); 
        # Update Item status: TF-tracking failed
        $item->status('TF');
      }
      else {
        # Update Item status: T-sucessful
        $item->status('T');
      }
    }

  }

	# Clean up files
	$self->archive_files();

	return 0;
}
sub archive_files {
	my $self = shift;
	# TODO: this sub can be called in various places to archive success or failures
	# but might need to be beefed up a bit. maybe have an archive directory for every id?
	# Loop through each file, append date exention, move to archive dir
  my $timestamp = strftime("%Y%m%d%H%M%S", localtime);
	
  die "Endicia input directory not defined" 
    unless defined $self->{postal_cfg}->{inputdir};

  for my $f ( glob("$self->{postal_cfg}->{returndir}/*  $self->{postal_cfg}->{inputdir}/*") ) {
    # TODO: also glob for .???? files
    next unless -f $f;
    my $filename = basename($f);
    my $d = "$self->{postal_cfg}->{archivedir}/Archived_${timestamp}_${filename}";
    #print "\nFILE: $filename F: '$f'\nD: '$d'\n";
    move($f, $d) or die "can't archive file '$filename' ('$f') to '$d'";
  }
}

################################################################################
sub btn_config_file_chooser_onClick {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_config_file_chooser_onClick <event_handler>
# end wxGlade
  my $dialog = Wx::FileDialog->new
      ( $self, "Select a file", $self->{previous_directory} || '',
        $self->{previous_file} || '',
        ( join '|', 'SHIPIT Config (*.ini)|*.ini',
                    'XML (*.xml)|*.xml', 'All files (*.*)|*.*' ),
        wxFD_OPEN);

    if( $dialog->ShowModal == wxID_CANCEL ) {
        $self->logit( "User cancelled the dialog" );
    } else {
        $self->logit( "Wildcard: %s", $dialog->GetWildcard);
        my @paths = $dialog->GetPaths;

        if( @paths > 0 ) {
            $self->logit( "File: $_" ) foreach @paths;
        } else {
            $self->logit( "No files" );
        }

        $self->{previous_directory} = $dialog->GetDirectory;
    }

    $dialog->Destroy;  
}


################################################################################
sub dd_config_environment_evtChoice {
	my ($self, $event) = @_;
# wxGlade: MyFrame::dd_config_environment_evtChoice <event_handler>
# end wxGlade

  my $choiceNbr = $event->GetSelection;
  return if ($choiceNbr==0);

  my $environment      = $event->GetString;
  # TODO: environment could be mandatory in the init block, rather than in the name. That way 
  #       we could also define other environments: dev2, system test, uat, etc...
  #       this way only allows for 'production' and 'development' 
  my $env              = $environment=~/.*production.*/i ? 'production' : 'development';
  my $type             = $environment=~/.*production.*/i ? 'important' : 'note';
  $self->{environment} = $env;

  $self->logit('note',"Environment is '$self->{environment}'");

  if ( ! -e $configuration_file ) {
    print "config file doesn't exist: '$configuration_file'";
    exit 1;
  }

  # Create config object
  my $cfg = Config::Simple->new();
  $cfg->read($configuration_file) or die $cfg->error();
  $self->{cfg} = $cfg->get_block($environment);

  $self->{tc_config_database}->SetValue( $self->{cfg}->{database}    );
  $self->{tc_config_db_type}->SetValue ( $self->{cfg}->{db_type}     );
  $self->{tc_config_user}->SetValue    ( $self->{cfg}->{db_user}     );
  $self->{tc_config_password}->SetValue( $self->{cfg}->{db_password} );
  $self->{tc_config_installed_location}->SetValue( $self->{installed_location} );

  $self->{postage_provider_config} = Config::Simple->new();
  $self->{postage_provider_config}->read($postage_provider_config_file) or die $self->{postage_provider_config}->error();

  # Create Ebay API call object
  $self->{api} = ShipItEbayAPICall->new( environment=>'production',);
  #print "API OBJECT: ",Dumper($self->{api});

  $self->banner($type,"$environment Environment");
  
  $self->btn_config_test_onClick(0);   # establish db connection
  $self->{connection_active}=1;
}


################################################################################
sub btn_config_test_onClick {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_config_test_onClick <event_handler>
# end wxGlade

  eval {
#     if ( $self->{cfg}->{db_dbms} =~ /^api$/i ) {
#       # do nothing
#       $self->{dbh} = bless {};
#       $self->logit('note',"NOTE:\nUsing ebay API, skipping connection test.\n");
#     }
#     elsif ( $self->{cfg}->{db_dbms} =~ /csv/i ) {
#       # Test connection by seeing if file exists
#       if ( ! -f $self->{cfg}->{ordersfile} ) {
#         $self->logit('error',"ERROR:\n\tOrders file not found. Looking for file: '$self->{cfg}->{ordersfile}' \n");
#         $self->banner('error',"File '$self->{cfg}->{ordersfile}' not found!");
#         $self->{connection_active}=0;
#         return;
#       }
#       $self->{dbh} = bless {};
#     }
#     else {

    # Open LOCAL database connection
    $self->{dbh} =
      DBI->connect( "DBI:$self->{cfg}->{db_type}:$self->{cfg}->{database}",
                    $self->{cfg}->{db_user},
                    $self->{cfg}->{db_password}, 
                    { 
                      RaiseError       => 1, 
                      AutoCommit       => 1, 
                      FetchHashKeyName => 'NAME_lc',
                      LongReadLen      => 32768,
                    } 
                  )
      || die "\n\nDatabase connection not made: $DBI::errstr\n\n";
#    }
  };

  if ($@) {
    $@ =~ s/^\n+//;
    $self->logit('error',"ERROR:\n\t$@ \n");
    $self->banner('error','Connection Failed');
    $self->{connection_active}=0;

		#print Dumper($self->{cfg});
    return;
  }
  
  $self->banner('info','Connection Verified');
  $self->{connection_active}=1;
}


################################################################################
sub nb_main_evtPageChanged {
	my ($self, $event) = @_;
# wxGlade: MyFrame::nb_main_evtPageChanged <event_handler>
# end wxGlade
  my $pagename = $self->{nb_main}->GetPageText( $self->{nb_main}->GetSelection() );

  $self->{pagename}      = $pagename;                           # 'Individual','Batch',Configuration', or 'Log'
  $self->{batchmode}     = $pagename =~ /.*batch.*/i ? 1 : 0;
  $self->{grid}          = $self->{batchmode} ? $self->{grid_batch} : $self->{grid_items}; # current grid object
  $self->{display_page}  = $pagename =~ /.*(batch|individual).*/i ? 1 : 0;
  my $config_selected    = $self->{dd_config_environment}->GetSelection(); # 0 if default first choice (0 indexed)

  # enable stage button if connected to DB and this is a display page
  if ($self->{display_page} && $config_selected && $self->{connection_active} ) {

    # Enable manual (re)stage button
    $self->{btn_stage}->Enable(1);

    # Automatically Stage packages if not yet staged
    if ( ! $self->{last_staged_date} ) {
      # If it's the first time
      $self->btn_stage_onClick(0);
    }
    else {
      # re-populate display
      $self->populate_batch_page() if ( $self->{batchmode} );
      $self->populate_single_page() if ( ! $self->{batchmode} );
    }
  }
  else {
    # disable buttons
    $self->{btn_stage}->Enable(0);
    $self->{btn_next}->Enable(0);
    $self->{btn_prev}->Enable(0);
    $self->{btn_print}->Enable(0);
  }
  
  # Output directories for Postal software
  if ( $self->{batchmode} ) { 
    $self->{grid}->ScrollLines( $self->{current_package_idx}->{ $self->{type} } -2 );
    $self->{postal_cfg} = $self->{postage_provider_config}->get_block('batch'); # 'batch' is hardcode in cfg/stamps.ini or cfg/endicia.ini
  }
  else {
    $self->{postal_cfg} = $self->{postage_provider_config}->get_block('single'); # 'single' is hardcode in  cfg/stamps.ini or cfg/endicia.ini
  }
  # Create the directories if they do not already exist
  for my $key ( keys %{$self->{postal_cfg}} ) {
    if ($key=~/.*dir(ectory)?$/i && ! -e $self->{postal_cfg}->{$key} ) {
      make_path($self->{postal_cfg}->{$key} );  
    }
  }
  
  # Clean up any files from a previous run
  $self->archive_files();
}


################################################################################
sub evt_grid_cell_changed {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_grid_cell_changed <event_handler>
# end wxGlade

  # Batch grid event - cell value changed

  my ($row,$col)    = ( $event->GetRow(), $event->GetCol() );
  my ($grid, $type) = ( $self->{grid}, $self->{type} );
  my $value         = $grid->GetCellValue($row,$col);

  # VALIDATION - Is it a number
  if ( $value !~ /^\d+$/ ) {
    # popup - value must be a number
    my $msgbox = Wx::MessageDialog->new( $self, "The value you entered '$value' must be a number", 'WARNING', wxOK|wxICON_EXCLAMATION );
    $msgbox->ShowModal();

    # reset to current value
    $grid->SetCellValue($row,$col,$self->{current_cell_value});
  }

  $self->{current_package_idx}->{$type} = $row;                # Set our current position in the package list
  $self->{pkg} = $self->{packages}->{$type}->[$row];           # Set the pointer to the current package

  # Set lbs/oz based on which column was changed
  my ($col_id, $col_desc, $col_lbs, $col_oz) = (0,1,2,3);
  if ( $col==$col_lbs ) {
    $self->{pkg}->{weight_lbs} = $value;
    $self->{pkg}->status('WC') if $value;
  }
  if ( $col==$col_oz ) {
    $self->{pkg}->{weight_oz}  = $value;
    $self->{pkg}->status('WC') if $value;
  }

  # Set status back to staged, if both weights are back to zero
  if ( ! ($self->{pkg}->{weight_lbs} || $self->{pkg}->{weight_oz}) ) {
    $self->{pkg}->status('S');
  }

  # enable print label buton, if the oz or lbs column has changed
  $self->{btn_print}->Enable
      if ($col == $col_lbs || $col == $col_oz);
}


################################################################################
sub evt_grid_cell_select {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_grid_cell_select <event_handler>
# end wxGlade

  my $row  = $event->GetRow();
  my $col  = $event->GetCol();
  my $grid = $self->{grid};
  my $type = $self->{type};

  $self->{current_package_idx}->{$type} = $row;
  $self->{pkg} = $self->{packages}->{$type}->[$row];

  # DE-Emphasize previous row
  $grid->SetRowAttr( $self->{emphasis_row}, ($self->{emphasis_row}%2)==0 ? $self->{attr_default} : $self->{attr_hl} );

  # Highlight current row
  $grid->SetRowAttr( $row, $self->{attr_emphasis} );
  $grid->AutoSizeRows();
  $grid->AutoSizeColumns();

  $self->{emphasis_row} = $row;
  $event->Skip;
}


################################################################################
sub tc_lbs_evtTextChanged {
	my ($self, $event) = @_;
# wxGlade: MyFrame::tc_lbs_evtTextChanged <event_handler>
# end wxGlade
  my $lbs = $self->{tc_lbs}->GetValue();

  $self->{pkg}->{weight_lbs} = $lbs;
  $self->{btn_print}->Enable(1);
}


################################################################################
sub tc_oz_evtTextChanged {
	my ($self, $event) = @_;
# wxGlade: MyFrame::tc_oz_evtTextChanged <event_handler>
# end wxGlade
  my $oz = $self->{tc_oz}->GetValue();

  $self->{pkg}->{weight_oz} = $oz;
  $self->{btn_print}->Enable(1);
}


################################################################################
sub tc_oz_evtTextEnter {
	my ($self, $event) = @_;
# wxGlade: MyFrame::tc_oz_evtTextEnter <event_handler>
# end wxGlade

  my $p = $self->{pkg};
  my $type = $self->{type};

  # Re-Calculate weights (in case user enter weight all in ounces)    
  my $weight_lbs = int( (($p->weight_lbs*16) + $p->weight_oz) / 16 );
  my $weight_oz  = (($p->weight_lbs*16) + $p->weight_oz) % 16;
  my $total_weight_oz = ($weight_lbs * 16) + $weight_oz;

  # Reset weights
  $p->weight_lbs( $weight_lbs );
  $p->weight_oz ( $weight_oz  );
	$p->total_weight_oz( $total_weight_oz );

  # Determine mail class/piece
  my ($mail_class,$mail_piece);
  if ( (! $self->{batchmode}) && $p->mailclass) {   # mailclass only set when selected from dropdown
    # Manually set the mail class
    $mail_class = $p->mailclass;
    $mail_piece = $p->mailpiece;
  }
  else {
    # Automatically set the  mail class


    #
    # DOMESTIC
    #
    if ( $type eq 'D' ) {

      my $mc = $self->{mail_map}->{D};

      if ( $p->{ship_priority_flag} eq 'P' ) {          # Buyer chose Priority
        $mail_class = $mc->{'Priority'}->{mailclass};
        $mail_piece = $mc->{'Priority'}->{mailpiece};
      }
      elsif ( $p->total_weight_oz > 16 ) {
        $mail_class = $mc->{'Priority'}->{mailclass};
        $mail_piece = $mc->{'Priority'}->{mailpiece};
      }
      else {
        $mail_class = $mc->{'First Class'}->{mailclass};
        $mail_piece = $mc->{'First Class'}->{mailpiece};
      }
    }

    #
    # INTERNATIONAL
    #
    elsif ( $type eq 'I' ) {

      my $mc = $self->{mail_map}->{I};

      # TODO: check dimensions

      if ( $p->{ship_priority_flag} eq 'P' ) {
        # Buyer chose Priority mail
        # TODO: How do we handle International Priority automatically?
        $self->banner('error','Can not automatically print label');
        $self->warning_dialog( 'ERROR: Buyer selected PRIORITY mail. Manually ship International Priority Package.' ); 
        return 0;
      }
      elsif ( $p->total_weight_oz > 70 ) {         
        # Package is too heavy to ship IPA or ePacket
        # TODO: How do we handle International Priority automatically?
        $self->banner('error','Can not automatically print label');
        $self->warning_dialog( 'ERROR: Package over 4.4 lbs. Manually ship International Priority or split into multiple packages.' ); 
        return 0;
      }
      elsif ( $self->isEPacketEligible($p->countryname) ) {

        # Note: Change 'United Kingdom' to 'Great Britain' because e-packet only allows the latter
        #       Change 'Repulic of Croatia' to 'Croatia'
        $p->countryname('Great Britain') if (  $p->countryname =~ /United Kingdom/i );
        $p->countryname('Croatia') if (  $p->countryname =~ /Republic of Croatia/i );

        # ePacket: Send ePacket if destination is eligible
        $mail_class = $mc->{'E-Packet'}->{mailclass};
        $mail_piece = $mc->{'E-Packet'}->{mailpiece};
      }
      else {
        #$self->warning_dialog( "Sending IPA. ",$p->countryname," is not eligible for ePacket." ); 
        $mail_class = $mc->{IPA}->{mailclass};
        $mail_piece = $mc->{IPA}->{mailpiece};
      }

    }
    else {
      die "ERROR: Domestic / International flag not set!";  # Unknown
    }

  } # end automatically set mail class

  # Set mail class/piece
  $p->mailclass( $mail_class );
  $p->mailpiece( $mail_piece );

  if ( $p->weight_oz > 0 || $p->weight_lbs > 0 ) {
    $p->status('WC'); # Weight Changed

    # Compare to Expected weight
    if ( $p->total_items == 1 && ! $self->is_expected_weight() ) {
      my $type = $self->{type};
      $self->{current_package_idx}->{$type}--;
      # Reload page
      $self->btn_next_onClick(0);
      return 0;
    }

    # Did package type / bubble wrap change, then save the changes to the database
    if ( $self->packaging_type_changed() ) {
      $self->btn_save_pkg_evtClick(0); 
    }

    $self->logit('info','Printing label...');
    $self->btn_print_onClick(0); # expects event
  }
  else {
    $self->banner('warn','Enter weight before printing'); # shouldn't get here because print button should be disabled
  }
}

sub save_actual_weight {
  my ($self, $event) = @_;
  my $pkg = $self->{pkg};
  my $item = $pkg->items->[0];
  my $title = $item->title;
  my $variation = $item->variation;
  my $pkg_weight = $pkg->total_weight_oz;

  #my $sql = q/update tty_storagelocation set packaged_weight=? where title=? and isnull(variation,' ')=isnull(?,' ') and active=1/;
  my $sql = q/update Inventory set packaged_weight=? where title=? and isnull(variation,' ')=isnull(?,' ') and active=1/;
  my $sth;

  eval {
    $sth = $self->{dbh}->prepare( $sql );
    $sth->execute( $pkg_weight, $title, $variation );
    $sth->finish();
  };
  if ($@) {
    die "btn_save_pkg_evtClick error: $@";
  }

  for my $p ( @{$self->{packages}->{ALL}} ) {
    for my $i ( @{ $p->items } ) {
      if ( $i->title eq $title && $i->variation eq $variation ) {
        $i->packaged_weight( $pkg_weight );
      }
    }
  }

  $self->{grid}->SetCellValue( 0, 6, $pkg_weight  );
  $self->banner('info','Packaged Weight Saved');
}

sub isEPacketEligible {
  my $self = shift;
  my $c = shift;

  return defined( $self->{epacket_eligible_countries}->{uc($c)} ) ? 1 : 0;
}

sub is_expected_weight {
  my $self = shift;
  my $actual_weight = $self->{pkg}->total_weight_oz;                  # Entered by user
  my $expected_weight = $self->{pkg}->items->[0]->packaged_weight;    # on the DB

  # If there's a current value on the database, then check if the value entered is within one ounce,
  # else record new weight in db
  if ( $expected_weight ) {
    if ( $actual_weight > $expected_weight+1 || $actual_weight < $expected_weight-1 ) {
      $self->banner('error','Weight is different than expected');
      my $rc = $self->yes_no_dialog("WARNING: The weight of $actual_weight oz. is not the same as the expected weight of $expected_weight oz. \n\nDo you want to save new weight and proceed?");

      if ( $rc ) {
        $self->save_actual_weight();
      }

      return $rc;
    }
  }
  else {
    $self->save_actual_weight();
  }
  
  return 1;
}

sub packaging_type_changed {
  my $self = shift;
  my $stored_package_type = $self->{pkg}->items->[0]->packaging;
  my $stored_bubble_wrap = $self->{pkg}->items->[0]->bubble_wrap;

  my $selected_package_type = $self->{dd_packaging}->GetStringSelection();
  my $selected_bubble_wrap = $self->{dd_bubble_wrap}->GetStringSelection();

  if ( ($stored_package_type ne $selected_package_type && $selected_package_type !~ /.*choose.*packag.*/i) ||
       ($stored_bubble_wrap ne $selected_bubble_wrap && $selected_bubble_wrap !~ /.*choose.*bubble.*/i) ) {
    return 1;
  }

  return 0;
}

################################################################################
sub choice_mailclass_evtChoice {
	my ($self, $event) = @_;
# wxGlade: MyFrame::choice_mailclass_evtChoice <event_handler>
# end wxGlade
	my $mailclass = $event->GetString();
  $self->{pkg}->mailclass( $self->{mail_map}->{ $self->{type} }->{$mailclass}->{mailclass} );
  $self->{pkg}->mailpiece( $self->{mail_map}->{ $self->{type} }->{$mailclass}->{mailpiece} );

  # Return to oz text box, most likely the user want to put in a weight next
  $self->{tc_oz}->SetFocus();
  $self->{tc_oz}->SetSelection(-1,-1);

}


################################################################################
sub btn_hidenotes_evtButton {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_hidenotes_evtButton <event_handler>
# end wxGlade
  if ( $self->{panel_notes_toggle} ) {
    # HIDE NOTES PANEL
    $self->{panel_notes_toggle} = 0;
    $self->{btn_hidenotes}->SetLabel( 'Show Notes' );
  }
  else {
    # SHOW (UN-HIDE) NOTES PANEL
    $self->{panel_notes_toggle} = 1;
    $self->{btn_hidenotes}->SetLabel( 'Hide Notes' );
  }

  $self->{panel_hide_notes}->Show( $self->{panel_notes_toggle} );
  $self->{sz_package_details}->Layout();
  $self->{tc_oz}->SetFocus();
  $self->{tc_oz}->SetSelection(-1,-1);
}


################################################################################
sub rb_pkg_disp_evtRadioBox {
	my ($self, $event) = @_;
# wxGlade: MyFrame::rb_pkg_disp_evtRadioBox <event_handler>
# end wxGlade
  my $choice = $event->GetString();
  $self->{type} = 'D' if $choice =~ /domestic/i;
  $self->{type} = 'I' if $choice =~ /international/i;

  if ( $self->{last_staged_date} ) {
    # re-populate display
    $self->populate_batch_page() if ( $self->{batchmode} );
    $self->populate_single_page() if ( ! $self->{batchmode} );
  }
}


################################################################################
sub evt_btn_send_email_evtButton {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_btn_send_email_evtButton <event_handler>
# end wxGlade
  my $item_id = ( @{$self->{pkg}->items} )[0]->ebayItemID;
  my $ebay_id = $self->{pkg}->ebayuserid;
  my $url = 'http://contact.ebay.com/ws/eBayISAPI.dll?ContactUserNextGen&iId=' . $item_id . '&recipient=' .  $ebay_id;

  Wx::LaunchDefaultBrowser( $url );
}


################################################################################
sub tc_advDays_evtTextChanged {
	my ($self, $event) = @_;
# wxGlade: MyFrame::tc_advDays_evtTextChanged <event_handler>
# end wxGlade
  my $date_advance = $self->{tc_advDays}->GetValue();

  if ( $date_advance =~ /^\d$/ && $date_advance >= 0 && $date_advance <= 5 ) {
    $self->{DateAdvance} = $date_advance;
    $self->warning_dialog( "Date Advance Set to: $self->{DateAdvance}" );
    # Return to oz text box, most likely the user want to put in a weight next
    $self->{tc_oz}->SetFocus();
    $self->{tc_oz}->SetSelection(-1,-1);
  }
  else {
    $self->warning_dialog( "Date Advance should be a number from 0-5, \n  0 = today \n  1 = tomorrow \n  etc... \n" );
  # Return to oz text box, most likely the user want to put in a weight next
  $self->{tc_oz}->SetFocus();
  $self->{tc_oz}->SetSelection(-1,-1);
  }

}


sub tc_advDays_evtTextEnter {
my ($self, $event) = @_;
# wxGlade: MyFrame::tc_advDays_evtTextEnter <event_handler>
$event->Skip;
# end wxGlade
}


sub btn_save_pkg_evtClick {
my ($self, $event) = @_;
# wxGlade: MyFrame::btn_save_pkg_evtClick <event_handler>
# end wxGlade
  my $packaging_type = $self->{dd_packaging}->GetStringSelection();
  my $bubble_wrap = $self->{dd_bubble_wrap}->GetStringSelection();

  #$self->yes_no_dialog( "Update packaging details? y/n" ); 

  # Save packaging details 
  my $item = $self->{pkg}->items->[0];
  my $title = $item->title;
  my $variation = $item->variation;

  # my $sql = qq/update tty_storagelocation set packaging=?, bubblewrap=? 
  #               where title=? and isnull(variation,' ')=isnull(?,' ') and active=1/;
  my $sql = qq/update Inventory set packaging=?, bubblewrap=? 
                where title=? and isnull(variation,' ')=isnull(?,' ') and active=1/;
  my $sth;

  eval {
    $sth = $self->{dbh}->prepare( $sql );
    $sth->execute( $packaging_type, $bubble_wrap, $title, $variation );
    $sth->finish();
  };
  if ($@) {
    die "btn_save_pkg_evtClick error: $@";
  }

  for my $p ( @{$self->{packages}->{ALL}} ) {
    for my $i ( @{ $p->items } ) {
      if ( $i->title eq $title && $i->variation eq $variation ) {
        $i->packaging( $packaging_type );
        $i->bubble_wrap( $bubble_wrap );
      }
    }
  }

  $self->{grid}->SetCellValue( 0, 4, $packaging_type  );
  $self->{grid}->SetCellValue( 0, 5, $bubble_wrap  );

  $self->banner('info','Packaging Details Saved');

}

# end of class MyFrame

#################################################################################
# Adding an image to a grid cell (the hard way!)
#################################################################################
package MyFrame::customImageRenderer; 

use strict;
use Wx qw[:everything];
use base 'Wx::PlGridCellRenderer';

our @images;
our $blank_image = Wx::Bitmap->new("images/blank_150x150.bmp", wxBITMAP_TYPE_ANY);

sub new {
  my $self = shift;
  my $myBitmap = shift;
  my $row = shift;
  $images[$row] = $myBitmap;
  $self->SUPER::new(@_); 
}

sub Draw {
  my ( $self, $grid, $attr, $dc, $rect, $row, $col, $sel ) = (shift, @_ );
  my $row_offset = $row * $grid->GetRowSize($row); 

  $dc->DrawBitmap($blank_image, 0, $row_offset, 0); # clear the previous image
  $dc->DrawBitmap($images[$row], 0, $row_offset, 0);      
}
1;

1;

package main;

unless(caller) {
  no warnings;
	local *Wx::App::OnInit = sub{1};
  use warnings;

	my $app = Wx::App->new();
	Wx::InitAllImageHandlers();

	my $frame_1 = MyFrame->new();

	$app->SetTopWindow($frame_1);
	$frame_1->Show(1);
	$app->MainLoop();
}


