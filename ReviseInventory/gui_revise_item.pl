#!/usr/bin/perl -w -- 
# generated by wxGlade 0.6.5 (standalone edition) on Fri Nov 30 13:55:30 2012
# To get wxPerl visit http://wxPerl.sourceforge.net/

# TODO: add to a config file:
#  $PATH=C:/Users/Owner/Documents/revise_item/
#  $ODBC=BTData_PROD_SQLEXPRESS
#  $eBayAuthToken=xxxxxxxxxxx
#

use Wx 0.15 qw[:allclasses];
use strict;

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;
use lib '../cfg';

use Wx::Locale gettext => '_T';

use LWP::UserAgent;
use LWP::Simple;
use HTTP::Request;
use HTTP::Headers;

use DBI;
use XML::Simple qw(XMLin XMLout);
use Date::Calc 'Today';
use Data::Dumper 'Dumper';			$Data::Dumper::Sortkeys = 1;
use File::Copy qw(copy move);
use POSIX;
use Getopt::Std;
use List::MoreUtils qw/uniq/;

use EbayConfig;

my %opts;
getopts('u',\%opts);

my $UPDATE_LOC = $opts{u} ? 1 : 0;

my $host = `hostname`;
chomp($host);
our $ODBC;

if ( $host eq "Ken-Laptop" ) {
  #chdir('C:/Users/Ken/Documents/');
  chdir('C:/Users/Ken/Documents/GitHub/EbayUtils2016/ReviseInventory');
#  $ODBC = 'BTData_DEV_SQLEXPRESS';
  $ODBC = 'BTData_PROD_SQLEXPRESS';
}
else {
  chdir('C:/Users/Owner/Documents/revise_item/');
  $ODBC = 'BTData_PROD_SQLEXPRESS';
}

if ( ! -d 'image' ) {
    mkdir('image') or die "can't create 'image' directory";
}

if ( ! -d 'image/cache' ) {
    mkdir('image/cache') or die "can't create image/cache' directory";
}


our $DEBUG            = 0;
our $PROD_ENVIRONMENT = 1;
our $REFRESH = 1;
our $PIC_LIMIT=7;     # Number of bitmap_buttons at the bottom of the screen (MINUS 1 for zero based index);
our $PIC_MAXH=400;     # picture max height dimension to which an image should be scaled
our $PIC_MAXW=400;     # picture max width dimension to which an image should be scaled
our $TPIC_MAXH=150;    # Thumbnail picture max height dimension to which an image should be scaled
our $TPIC_MAXW=120;    # Thumbnail picture max width dimension to which an image should be scaled

# Supplier Name / Supplier ID (TODO: store on a DB table later)
our @all_suppliers = (
	 'Toysmith'
	,'Patch Products'
	,'Westminster'
	,'Learning Resources'
	,'Dwink'
	,'Warm Fuzzy Toys'
	,'FCTRY'
	,'Mary Meyer'
	,'Myself Belts'
	,'Melissa and Doug'
	,'Toyops'
	,'Potty Watch'
	,'Best of Toys'
	,'Hohner'
	,'The Pencil Grip'
	,'Educational Insights'
	,'Boston America'
	,'Tedco'
	,'Tangle'
	,'Play Visions'
	,'Peaceable Kingdom'
	,'Accoutrements'
	,'Allermates'
	,'Fred'
	,'Knot Genie'
	,'NPW'
	,'Fun Express'
	,'Billy Bob'
	,'PBNJ'
	,'Gamago'
	,'Eeboo'
	,'Eureka'
	,'Triops'
	,'International Playthings'
	,'International Arrivals'
	,'Aerobie'
	,'Mudpuppy'
	,'Toobaloo'
	,'Hickory'
	,'Kidrobot'	
	,'Price Productions'
	,'Funbites'
	,'Time Timer'
	,'Oriental Trading'
	,'Geddes'
	,'Trend'
	,'Original Toy Company'
	,'Chewy Tubes'
	,'ChewNoodle'
	,'Crazy Aarons Thinking Putty'
	,'US Toy'
	,'KIPP'
	,'Basic Fun'
	,'Hog Wild'
	,'Gymnic'
	,'Janod'
	,'HandiWriter'
	,'ALEX'
  ,'Ravensburger',
  ,'Garlic Press'
  ,'Paladone'
  ,'Rich Frog'
);

@all_suppliers = sort @all_suppliers;
our %all_suppliers_idx;
for ( my $i=0; $i<@all_suppliers; $i++ ) {
  # adding $i at 1 because later we will insert 'select a supplier' in to position zero.
	$all_suppliers_idx{$all_suppliers[$i]} = $i+1;
}

###################################################
# EBAY API INFO                                   #
###################################################

# Ebay API Request Headers
our $header = $EbayConfig::ES_http_header;

# Ebay Authentication Token
our $eBayAuthToken = $EbayConfig::ES_eBayAuthToken;


# define the XML request
    my $request_getmyebayselling = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetMyeBaySellingRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
<ActiveList>
	<Include>true</Include>
	<Pagination>
		<EntriesPerPage>200</EntriesPerPage>
		<PageNumber>__PAGE_NUMBER__</PageNumber>
	</Pagination>
</ActiveList>
<OutputSelector>TotalNumberOfPages</OutputSelector>
<OutputSelector>ItemID</OutputSelector>
<OutputSelector>Title</OutputSelector>
<OutputSelector>SKU</OutputSelector>
<OutputSelector>VariationTitle</OutputSelector>
</GetMyeBaySellingRequest>
END_XML

my $request_reviseitem_default = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<ReviseFixedPriceItemRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
<Item>
<ItemID>__ItemID__</ItemID>
__SINGLE_SKU__
__VARIATION_SKU__
__quantityXML__
</Item>
</ReviseFixedPriceItemRequest>
END_XML

my $request_getitem_default = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetItemRequest xmlns="urn:ebay:apis:eBLBaseComponents">
	<RequesterCredentials>
		<eBayAuthToken>$eBayAuthToken</eBayAuthToken>
	</RequesterCredentials>
	<WarningLevel>High</WarningLevel>
	<ItemID>__ItemID__</ItemID>
	<IncludeItemSpecifics>TRUE</IncludeItemSpecifics>
</GetItemRequest>
END_XML

my $request_getitem2_default = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetItemRequest xmlns="urn:ebay:apis:eBLBaseComponents">
	<RequesterCredentials>
		<eBayAuthToken>$eBayAuthToken</eBayAuthToken>
	</RequesterCredentials>
	<WarningLevel>High</WarningLevel>
	<ItemID>__ItemID__</ItemID>
	<IncludeItemSpecifics>TRUE</IncludeItemSpecifics>

	<OutputSelector>PictureDetails</OutputSelector>
	<OutputSelector>SKU</OutputSelector>
	<OutputSelector>Title</OutputSelector>
	<OutputSelector>VariationSpecificPictureSet</OutputSelector>
	<OutputSelector>VariationSpecifics</OutputSelector>
	<OutputSelector>UPC</OutputSelector>
	<OutputSelector>ItemSpecifics</OutputSelector>
  <OutputSelector>ShippingPackageDetails</OutputSelector>
  <OutputSelector>SellingStatus</OutputSelector>
  <OutputSelector>Quantity</OutputSelector>
</GetItemRequest>
END_XML
#<OutputSelector>Item</OutputSelector>


###########################################################
# END EBAY API INFO                                       #
###########################################################

####################################################################################################
sub new {
	my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
	$parent = undef              unless defined $parent;
	$id     = -1                 unless defined $id;
	$title  = ""                 unless defined $title;
	$pos    = wxDefaultPosition  unless defined $pos;
	$size   = wxDefaultSize      unless defined $size;
	$name   = ""                 unless defined $name;

# begin wxGlade: MyFrame::new
$style = wxCAPTION|wxCLOSE_BOX|wxMINIMIZE_BOX|wxMAXIMIZE_BOX|wxSYSTEM_MENU|wxRESIZE_BORDER|wxTAB_TRAVERSAL|wxCLIP_CHILDREN 
unless defined $style;

$self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
$self->{panel_product_search_outer} = Wx::Panel->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
$self->{panel_product_search_inner} = Wx::Panel->new($self->{panel_product_search_outer}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
$self->{lbl_search} = Wx::StaticText->new($self->{panel_product_search_inner}, wxID_ANY, _T("Title Search :"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE);
$self->{lbl_title_select} = Wx::StaticText->new($self->{panel_product_search_inner}, wxID_ANY, _T("Select Title :"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE);
$self->{lbl_title} = Wx::StaticText->new($self->{panel_product_search_inner}, wxID_ANY, _T("Title :"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE);
$self->{tc_search} = Wx::TextCtrl->new($self->{panel_product_search_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
$self->{lbl_match_num} = Wx::StaticText->new($self->{panel_product_search_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
$self->{ch_title_select} = Wx::Choice->new($self->{panel_product_search_inner}, wxID_ANY, wxDefaultPosition, wxDefaultSize, [], );
$self->{tc_title} = Wx::TextCtrl->new($self->{panel_product_search_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
$self->{sz_product_search_staticbox} = Wx::StaticBox->new($self->{panel_product_search_inner}, wxID_ANY, _T("Product Search") );
$self->{panel_title_matches_outer} = Wx::Panel->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
$self->{panel_hide_title_matches} = Wx::Panel->new($self->{panel_title_matches_outer}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
$self->{bitmap_button_0} = Wx::BitmapButton->new($self->{panel_hide_title_matches}, wxID_ANY, Wx::Bitmap->new("C:\\Users\\Amy\\Documents\\revise_item\\image\\missing_thumbnail.jpg", wxBITMAP_TYPE_ANY));
$self->{bitmap_button_1} = Wx::BitmapButton->new($self->{panel_hide_title_matches}, wxID_ANY, Wx::Bitmap->new("C:\\Users\\Amy\\Documents\\revise_item\\image\\missing_thumbnail.jpg", wxBITMAP_TYPE_ANY));
$self->{bitmap_button_2} = Wx::BitmapButton->new($self->{panel_hide_title_matches}, wxID_ANY, Wx::Bitmap->new("C:\\Users\\Amy\\Documents\\revise_item\\image\\missing_thumbnail.jpg", wxBITMAP_TYPE_ANY));
$self->{bitmap_button_3} = Wx::BitmapButton->new($self->{panel_hide_title_matches}, wxID_ANY, Wx::Bitmap->new("C:\\Users\\Amy\\Documents\\revise_item\\image\\missing_thumbnail.jpg", wxBITMAP_TYPE_ANY));
$self->{bitmap_button_4} = Wx::BitmapButton->new($self->{panel_hide_title_matches}, wxID_ANY, Wx::Bitmap->new("C:\\Users\\Amy\\Documents\\revise_item\\image\\missing_thumbnail.jpg", wxBITMAP_TYPE_ANY));
$self->{bitmap_button_5} = Wx::BitmapButton->new($self->{panel_hide_title_matches}, wxID_ANY, Wx::Bitmap->new("C:\\Users\\Amy\\Documents\\revise_item\\image\\missing_thumbnail.jpg", wxBITMAP_TYPE_ANY));
$self->{bitmap_button_6} = Wx::BitmapButton->new($self->{panel_hide_title_matches}, wxID_ANY, Wx::Bitmap->new("C:\\Users\\Amy\\Documents\\revise_item\\image\\missing_thumbnail.jpg", wxBITMAP_TYPE_ANY));
$self->{bitmap_button_7} = Wx::BitmapButton->new($self->{panel_hide_title_matches}, wxID_ANY, Wx::Bitmap->new("C:\\Users\\Amy\\Documents\\revise_item\\image\\missing_thumbnail.jpg", wxBITMAP_TYPE_ANY));
$self->{panel_product_details_outer} = Wx::Panel->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
$self->{panel_product_details_inner} = Wx::Panel->new($self->{panel_product_details_outer}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
$self->{lbl_variation} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, _T("Variation :"), wxDefaultPosition, wxDefaultSize, );
$self->{ch_variation} = Wx::Choice->new($self->{panel_product_details_inner}, wxID_ANY, wxDefaultPosition, wxDefaultSize, [], );
$self->{lbl_item_id} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, _T("Item Number :"), wxDefaultPosition, wxDefaultSize, );
$self->{tc_item_id} = Wx::TextCtrl->new($self->{panel_product_details_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
$self->{lbl_product_sku} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, _T("Product SKU :"), wxDefaultPosition, wxDefaultSize, );
$self->{tc_product_sku} = Wx::TextCtrl->new($self->{panel_product_details_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
$self->{lbl_ttb_sku} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, _T("TTB SKU :"), wxDefaultPosition, wxDefaultSize, );
$self->{tc_ttb_sku} = Wx::TextCtrl->new($self->{panel_product_details_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
$self->{lbl_quantity_add} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, _T("Add Quantity :"), wxDefaultPosition, wxDefaultSize, );
$self->{tc_quantity_add} = Wx::TextCtrl->new($self->{panel_product_details_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
$self->{lbl_quantity_total} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, _T("Total Quantity :"), wxDefaultPosition, wxDefaultSize, );
$self->{tc_quantity_total} = Wx::TextCtrl->new($self->{panel_product_details_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
$self->{lbl_quantity_available} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
$self->{lbl_location} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, _T("Location :"), wxDefaultPosition, wxDefaultSize, );
$self->{tc_location} = Wx::TextCtrl->new($self->{panel_product_details_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
$self->{lbl_supplier} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, _T("Supplier :"), wxDefaultPosition, wxDefaultSize, );
$self->{ch_supplier} = Wx::Choice->new($self->{panel_product_details_inner}, wxID_ANY, wxDefaultPosition, wxDefaultSize, [], );
$self->{lbl_weight} = Wx::StaticText->new($self->{panel_product_details_inner}, wxID_ANY, _T("Weight (oz) :"), wxDefaultPosition, wxDefaultSize, );
$self->{tc_weight} = Wx::TextCtrl->new($self->{panel_product_details_inner}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
$self->{btn_submit} = Wx::Button->new($self->{panel_product_details_inner}, wxID_ANY, _T("Update Item"));
$self->{btn_clear_form} = Wx::Button->new($self->{panel_product_details_inner}, wxID_ANY, _T("Clear Form"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
$self->{panel_main_image} = Wx::Panel->new($self->{panel_product_details_inner}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
$self->{bmp_default_image} = Wx::StaticBitmap->new($self->{panel_main_image}, wxID_ANY, Wx::Bitmap->new("image/missing.jpg", wxBITMAP_TYPE_ANY), wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER);
$self->{sz_product_details_staticbox} = Wx::StaticBox->new($self->{panel_product_details_inner}, wxID_ANY, _T("Product Details") );

$self->__set_properties();
$self->__do_layout();

Wx::Event::EVT_TEXT_ENTER($self, $self->{tc_search}->GetId, \&evt_tc_search_Text_Enter);
Wx::Event::EVT_TEXT($self, $self->{tc_search}->GetId, \&evt_tc_search_Text);
Wx::Event::EVT_CHOICE($self, $self->{ch_title_select}->GetId, \&evt_ch_title_select_Choice);
Wx::Event::EVT_BUTTON($self, $self->{bitmap_button_0}->GetId, \&evt_button_image_select_clicked);
Wx::Event::EVT_BUTTON($self, $self->{bitmap_button_1}->GetId, \&evt_button_image_select_clicked);
Wx::Event::EVT_BUTTON($self, $self->{bitmap_button_2}->GetId, \&evt_button_image_select_clicked);
Wx::Event::EVT_BUTTON($self, $self->{bitmap_button_3}->GetId, \&evt_button_image_select_clicked);
Wx::Event::EVT_BUTTON($self, $self->{bitmap_button_4}->GetId, \&evt_button_image_select_clicked);
Wx::Event::EVT_BUTTON($self, $self->{bitmap_button_5}->GetId, \&evt_button_image_select_clicked);
Wx::Event::EVT_BUTTON($self, $self->{bitmap_button_6}->GetId, \&evt_button_image_select_clicked);
Wx::Event::EVT_BUTTON($self, $self->{bitmap_button_7}->GetId, \&evt_button_image_select_clicked);
Wx::Event::EVT_CHOICE($self, $self->{ch_variation}->GetId, \&evt_ch_variation_choice);
Wx::Event::EVT_TEXT_ENTER($self, $self->{tc_product_sku}->GetId, \&evt_tc_product_sku_text_enter);
Wx::Event::EVT_TEXT_ENTER($self, $self->{tc_quantity_add}->GetId, \&evt_tc_quantity_add_Text_Enter);
Wx::Event::EVT_TEXT_ENTER($self, $self->{tc_quantity_total}->GetId, \&evt_tc_quantity_total_Text_Enter);
Wx::Event::EVT_TEXT_ENTER($self, $self->{tc_location}->GetId, \&evt_tc_location_text_enter);
Wx::Event::EVT_CHOICE($self, $self->{ch_supplier}->GetId, \&evt_ch_supplier_choice);
Wx::Event::EVT_TEXT_ENTER($self, $self->{tc_weight}->GetId, \&evt_tc_weight_text_enter);
Wx::Event::EVT_BUTTON($self, $self->{btn_submit}->GetId, \&btn_submit_onClick);
Wx::Event::EVT_BUTTON($self, $self->{btn_clear_form}->GetId, \&btn_clear_form_onClick);

# end wxGlade

  ###########################################################
  # USER DEFINED EVENTS                                     #
  ###########################################################
#  Wx::Event::EVT_KEY_DOWN($self->{tc_quantity_total}, \&evt_key_down_tab);

  ###########################################################
  # USER DEFINED VARIABLES                                  #
  ###########################################################
  $self->{objHeader}           = $header;

  $self->{request_reviseitem_default} = $request_reviseitem_default;
  $self->{request_getitem_default}    = $request_getitem_default;
  $self->{request_getitem2_default}   = $request_getitem2_default;
  $self->{request_getmyebayselling_default} = $request_getmyebayselling;

	# Set Default "missing" image (SCALED TO CORRECT SIZE)
  $self->{images}->{loading}  = Wx::Bitmap->new('image/loading.png', wxBITMAP_TYPE_ANY); 
  $self->{images}->{updating} = Wx::Bitmap->new('image/updating.png', wxBITMAP_TYPE_ANY); 
  $self->{images}->{success}  = Wx::Bitmap->new('image/successful.png', wxBITMAP_TYPE_ANY); 
  $self->{image_default}      = Wx::Bitmap->new( Wx::Image->new('image/missing.jpg', wxBITMAP_TYPE_ANY)->Scale($PIC_MAXH,$PIC_MAXW) );
  $self->{image_default_128}  = Wx::Bitmap->new( 'image/missing_thumbnail.jpg', wxBITMAP_TYPE_ANY);
	$self->{bmp_default_image}->SetMinSize( Wx::Size->new($PIC_MAXH,$PIC_MAXW) );

  for my $i ( 0..$PIC_LIMIT ) {
    $self->{"bitmap_button_$i"}->SetBitmapDisabled( $self->{image_default_128} );
  }

	# SQL: Get list of items                                  # TODO: add postage fields?
  $self->{sql}->{get_all_items} = 'select * from Inventory where active=1';

  # SQL: Insert/Update Location/SKU info -------> since we're using Linnworks, no need to update certain fields here because they won't be updated in LinnWorks
  #                                               NOTE: there shouldn't be any inserts because we have run this script with -u option to pre-load DB table
  $self->{sql}->{upsert_storage_location} = <<END_SQL;
MERGE Inventory t
USING (
  VALUES (?,?,?,?,?,?,?,?)
) AS s (ebayitemid, upc, sku, location, title, variation, weight, supplier)
ON 
  t.title     = s.title     and
	t.variation = s.variation
WHEN MATCHED THEN
  UPDATE SET 
			  t.upc = isnull(s.upc,t.upc),
	      t.location         = UPPER(s.location),
        t.last_modified    = getdate(),
			  t.weight           = s.weight,
				t.supplier         = s.supplier
WHEN NOT MATCHED THEN
  INSERT (ebayitemid, upc, sku, location, title, variation, last_modified, weight, supplier, active )
  VALUES (s.ebayitemid, s.upc, s.sku, UPPER(s.location), s.title, s.variation, getdate(), s.weight, s.supplier, 1)
;
END_SQL

  # SQL: Insert/Update location table when UPDATE_LOC (-u) switch is given
  #      This needs to be done to periodically to update the ebayItemID in particular
  $self->{sql}->{clear_active_flag} = 'update Inventory set active=0';
  $self->{sql}->{upsert_UPDATE_LOC} = <<END_SQL;
MERGE INTO Inventory t
USING (
  VALUES (?,?,?,?,?,?,?,?,?,?)
) AS s (ebayitemid, supplier, sku, title, variation, image_url, main_image_url, upc, weight, quantity)
ON 
  t.title     = s.title and
  isnull(t.variation,'') = isnull(s.variation,'')
WHEN MATCHED THEN
  UPDATE SET 
			 t.supplier         = isnull(t.supplier,s.supplier),
	     t.ebayitemid       = s.ebayitemid,
	     t.sku              = s.sku,
       t.last_modified    = getdate(),
       t.image_url        = s.image_url,
       t.main_image_url   = s.main_image_url,
			 t.upc              = isnull(t.upc,s.upc),
			 t.weight           = isnull(t.weight,s.weight),
			 t.quantity         = s.quantity,
       t.active           = 1
WHEN NOT MATCHED THEN
  INSERT (ebayitemid, supplier, sku, title, variation, last_modified, image_url, main_image_url, active, upc, weight, quantity)
  VALUES (s.ebayitemid, s.supplier, s.sku, s.title, s.variation, getdate(), s.image_url, s.main_image_url, 1, s.upc, s.weight, s.quantity)
;
END_SQL

  # SQL: Get SKU/Location record - Should return one record if there are no variations
  $self->{sql}->{get_storage_location_no_var} = <<END_SQL;
select ebayitemid, upc, sku, location, title, variation, weight, supplier
  from Inventory
 where title = ?
   and (variation is null or variation = '')
END_SQL

  # SQL: Get SKU/Location record - Should return one record for the given variation
  $self->{sql}->{get_storage_location_var} = <<END_SQL;
select ebayitemid, upc, sku, location, title, variation, weight, supplier
  from Inventory
 where title = ?
   and variation = ?
END_SQL

	# SQL: Get next SKU
	$self->{sql}->{get_next_sku} = <<END_SQL;
select max( substring(sku,4,6) ) + 1 as next_sku
  from Inventory
END_SQL


  $self->__load_items();

  #
  # TODO: quantity fields enabled BUT have the user verify IF the quantity is *ZERO*  (as that will end the listing)
  #

  # Populate Supplier Choice Box
  $self->{ch_supplier}->Clear();
  $self->{ch_supplier}->Append('Select a Supplier');
  $self->{ch_supplier}->SetSelection(0);
  for ( @all_suppliers ) {
    $self->{ch_supplier}->Append($_);
  }


#  $self->Layout();
#  $self->Refresh() if ( $REFRESH );
  
  return $self;
}


####################################################################################################
# New Load Items
####################################################################################################
sub __load_items {
  my $self = shift;
  my $results_hashref = {};

  my $pagenumber=1;
  my $maxpages=999;
  my @all_items;

  # Get all active listing/item ID's from eBay
  # These will be the only items in the look up table ( I think! )
  $self->{dbh} =
    DBI->connect( "DBI:ODBC:$ODBC",
                  'shipit2',
                  'shipit2',
                  { 
                    RaiseError       => 0, 
                    AutoCommit       => 1, 
                    FetchHashKeyName => 'NAME_lc',
                    LongReadLen      => 100000,
                  } 
                )
    || die "\n\nDatabase connection not made: $DBI::errstr\n\n";

# TODO: testing!
# $UPDATE_LOC=0
  if ( $UPDATE_LOC ) {
    # Get all active items from eBay
    while ( $pagenumber <= $maxpages ) {
      $self->{request} = $self->{request_getmyebayselling_default};
      $self->{request} =~ s/__PAGE_NUMBER__/$pagenumber/;

      $self->{objHeader}->remove_header('X-EBAY-API-CALL-NAME');
      $self->{objHeader}->push_header  ('X-EBAY-API-CALL-NAME'=>'GetMyeBaySelling' );

      my $response_hash = $self->submit_request();

      for my $i ( @{$response_hash->{ActiveList}->{ItemArray}->{Item}} ) {
        push(@all_items, $i->{ItemID});
      }

      if ($pagenumber==1) {
        $maxpages = $response_hash->{ActiveList}->{PaginationResult}->{TotalNumberOfPages};
      }

      print "\npage $pagenumber of $maxpages";
      $pagenumber++;
    }

    my $all_item_cnt = @all_items;
    print "\n\nFound $all_item_cnt items! \n\n";

    ####################################################################################################
    # UPDATE Inventory TABLE   (eBayItemID, ImageURL, active flag, etc)
    my $itemcnt=0;

#TODO: ADD LINE BACK IN!  COMMENTED OUT FOR TESTING.
    $self->{dbh}->do( $self->{sql}->{clear_active_flag} ) or die "can't execute stmt";

		my $sql = $self->{sql}->{upsert_UPDATE_LOC};
		my $sth = $self->{dbh}->prepare( $sql ) or die "can't prepare stmt: $sql";

    # Only run this to update/fix the Inventory table (i.e. to make sure eBayItemID is current)
    for my $item_id ( uniq sort @all_items ) {

#TODO: COMMENT OUT THIS LINE. UNCOMMENTED FOR TESTING.
#next unless ( $item_id =~ /281957643708/ );

      $itemcnt++;
      print "\nListing #$itemcnt ( $item_id )";

      # Get image URL, title, variations, etc...
      $self->{request} = $self->{request_getitem2_default};
      $self->{request} =~ s/__ItemID__/$item_id/;           
      $self->{objHeader}->remove_header('X-EBAY-API-CALL-NAME');
      $self->{objHeader}->push_header  ('X-EBAY-API-CALL-NAME'=>'GetItem' );

      my $r = $self->submit_request();
      $r = $r->{Item};

#TODO: COMMENT OUT THIS LINE. UNCOMMENTED FOR TESTING.
#     print Dumper($r);
#			exit;

      my $title = $r->{Title};

      my $extimage = ref($r->{PictureDetails}->{ExternalPictureURL}) eq 'ARRAY'
                     ? $r->{PictureDetails}->{ExternalPictureURL}->[0]
                     : $r->{PictureDetails}->{ExternalPictureURL};
      my $intimage = ref($r->{PictureDetails}->{PictureURL}) eq 'ARRAY'
                     ? $r->{PictureDetails}->{PictureURL}->[0]
                     : $r->{PictureDetails}->{PictureURL};

      # Ignore linnworks hosted images
			# $extimage = '' if ( $extimage =~ /linnlive/ );
			# $intimage = '' if ( $intimage =~ /linnlive/ );

      my $image_url_main;
      eval {
        $image_url_main = $extimage ? $extimage : $intimage ? $intimage : $r->{PictureDetails}->{GalleryURL};
      };
      if ($@) {
        print "\nERROR: item $item_id - Gallery pic: '$r->{PictureDetails}'";
        next;
      }

			my $lbs = $r->{ShippingPackageDetails}->{WeightMajor}->{content};
			my $ozs = $r->{ShippingPackageDetails}->{WeightMinor}->{content};
			my $weight_oz = ($lbs*16) + $ozs;

      my $gross_qty = $r->{Quantity} ? $r->{Quantity} : 0;
      my $sold_qty  = $r->{SellingStatus}->{QuantitySold} ? $r->{SellingStatus}->{QuantitySold} : 0 ;
      my $avail_qty = $gross_qty - $sold_qty;

      my $brand = get_Brand($r->{ItemSpecifics}); # supplier

      if ( defined $r->{Variations} ) {
        # get variation/sku
        my $sku_map={};
        my $img_map={};
				my $upc_map={};
        for my $v ( @{$r->{Variations}->{Variation}} ) {
          my $var;
          if ( ref($v->{VariationSpecifics}->{NameValueList} ) eq 'ARRAY' ) {
            $var = $v->{VariationSpecifics}->{NameValueList}->[0]->{Value};
          }
          else {
              $var = $v->{VariationSpecifics}->{NameValueList}->{Value};
          }
          $sku_map->{ $var } = $v->{SKU};
          $img_map->{ $var } = $image_url_main; # default image, may be replaced below

					# Get variation UPC (2015/10/03)
					if ( defined $v->{VariationProductListingDetails}->{UPC} ) {
					  $upc_map->{$var} = $v->{VariationProductListingDetails}->{UPC};
					}
        }         

        # Get variation specific pictures (if they exist)
        if ( defined $r->{Variations}->{Pictures}->{VariationSpecificPictureSet} ) {
          for my $v ( @{$r->{Variations}->{Pictures}->{VariationSpecificPictureSet}} ) {
            my $variation = $v->{VariationSpecificValue};
            my $extimage  = ref( $v->{ExternalPictureURL} ) eq 'ARRAY'  
                            ? $v->{ExternalPictureURL}->[0]
                            : $v->{ExternalPictureURL};
            my $intimage  = ref( $v->{PictureURL} ) eq 'ARRAY'
                            ? $v->{PictureURL}->[0]
                            : $v->{PictureURL};

						# Ignore linnworks hosted images
						# $extimage = '' if ( $extimage =~ /linnlive/ );
						# $intimage = '' if ( $intimage =~ /linnlive/ );

            my $image_url = $extimage || $intimage || $image_url_main;
            
            $img_map->{ $variation } = $image_url;
          }
        }

        # Update location table
        for my $variation ( keys %$upc_map ) {
          my $sku       = $sku_map->{$variation};
          my $image_url = $img_map->{$variation};
					my $upc       = $upc_map->{$variation};
          $sth->execute($item_id, $brand, $sku, $title, $variation, $image_url, $image_url_main,$upc,$weight_oz,$avail_qty) or die "can't execute query: $sql";
        }
      }
      else {
        # Non-variation listing
        my $variation = '';
        my $image_url = $image_url_main;
        my $sku   = $r->{SKU};
        my $upc       = get_UPC($r->{ItemSpecifics});
			  
        $sth->execute($item_id, $brand, $sku, $title, $variation, $image_url, $image_url_main, $upc,$weight_oz,$avail_qty) or die "can't execute query: $sql";
      }

    } # End for @all_items loop
  } # End if UPDATE_LOC

  # build the lookup tables using a select from the Inventory table
  my $sth = $self->{dbh}->prepare( $self->{sql}->{get_all_items} ) or die "can't prepare stmt";
  $sth->execute() or die "can't execute query";

  my $st={}; 
  my $upc_lookup={};

  while ( my $r = $sth->fetchrow_hashref ) {
    my $title = $r->{title};  
    my $upc   = defined $r->{upc} ? $r->{upc} : '';
    my $variation_name = defined $r->{variation} ? $r->{variation} : '';

    $st->{ $r->{title} }->{itemid}         = $r->{ebayitemid};
    $st->{ $r->{title} }->{primaryPicture} = $r->{main_image_url};

    if ( $r->{variation} ) {
      push( @{$st->{$title}->{variations}}, $variation_name );
			# fix linnworks issue
			$r->{image_url} = $r->{main_image_url} if ( $r->{image_url} =~ /linnlive/ );
      $st->{$title}->{variation_images}->{$variation_name} = $r->{image_url};
    }
    else {
      $st->{$title}->{variations} = [];
    }

    # avoid warning about uninitialized values
    if ( $upc ) { # && ! defined $upc_lookup->{$upc} ) {
        $upc_lookup->{$upc}->{$title} = {};
    }

    $upc_lookup->{$upc}->{$title}->{$variation_name} = 1
      if ( $upc && $variation_name );
  }

  $self->{item_lookup_table} = $st;
  $self->{item_lookup_table_keys} = [uniq sort keys %{$self->{item_lookup_table}}];
 
  $self->{upc_lookup_table}  = $upc_lookup;
	$self->{upc_lookup_table_keys} = [uniq sort keys %{$self->{upc_lookup_table}}];
 
	$self->{all_titles_lookup} = [@{$self->{item_lookup_table_keys}}, @{$self->{upc_lookup_table_keys}}];

}

####################################################################################################
sub __set_properties {
	my $self = shift;

# begin wxGlade: MyFrame::__set_properties
$self->SetTitle(_T("The Teaching Toy Box - Inventory It!"));
$self->SetSize(Wx::Size->new(1486, 917));
$self->SetBackgroundColour(Wx::Colour->new(255, 255, 255));
$self->{lbl_search}->SetMinSize(Wx::Size->new(100, 30));
$self->{lbl_search}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{lbl_title_select}->SetMinSize(Wx::Size->new(100, 30));
$self->{lbl_title_select}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{lbl_title}->SetMinSize(Wx::Size->new(37, 16));
$self->{lbl_title}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{tc_search}->SetMinSize(Wx::Size->new(300, 30));
$self->{tc_search}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, ""));
$self->{tc_search}->SetFocus();
$self->{lbl_match_num}->SetMinSize(Wx::Size->new(-1, 16));
$self->{lbl_match_num}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, ""));
$self->{ch_title_select}->SetMinSize(Wx::Size->new(600, 29));
$self->{ch_title_select}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{ch_title_select}->SetSelection(0);
$self->{tc_title}->SetMinSize(Wx::Size->new(600, 30));
$self->{tc_title}->SetBackgroundColour(Wx::Colour->new(232, 232, 232));
$self->{tc_title}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, ""));
$self->{panel_product_search_inner}->SetBackgroundColour(Wx::Colour->new(253, 199, 38));
$self->{panel_product_search_outer}->SetBackgroundColour(Wx::Colour->new(253, 199, 38));
$self->{bitmap_button_0}->SetSize($self->{bitmap_button_0}->GetBestSize());
$self->{bitmap_button_1}->SetSize($self->{bitmap_button_1}->GetBestSize());
$self->{bitmap_button_2}->SetSize($self->{bitmap_button_2}->GetBestSize());
$self->{bitmap_button_3}->SetSize($self->{bitmap_button_3}->GetBestSize());
$self->{bitmap_button_4}->SetSize($self->{bitmap_button_4}->GetBestSize());
$self->{bitmap_button_5}->SetSize($self->{bitmap_button_5}->GetBestSize());
$self->{bitmap_button_6}->SetSize($self->{bitmap_button_6}->GetBestSize());
$self->{bitmap_button_7}->SetSize($self->{bitmap_button_7}->GetBestSize());
$self->{panel_hide_title_matches}->SetBackgroundColour(Wx::Colour->new(127, 207, 24));
$self->{panel_hide_title_matches}->SetFont(Wx::Font->new(8, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{panel_title_matches_outer}->SetBackgroundColour(Wx::Colour->new(127, 207, 24));
$self->{lbl_variation}->SetMinSize(Wx::Size->new(100, 30));
$self->{lbl_variation}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
$self->{lbl_variation}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{ch_variation}->SetMinSize(Wx::Size->new(300, 29));
$self->{ch_variation}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{ch_variation}->SetSelection(0);
$self->{lbl_item_id}->SetMinSize(Wx::Size->new(100, 30));
$self->{lbl_item_id}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
$self->{lbl_item_id}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{tc_item_id}->SetMinSize(Wx::Size->new(300, 30));
$self->{tc_item_id}->SetBackgroundColour(Wx::Colour->new(232, 232, 232));
$self->{tc_item_id}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{lbl_product_sku}->SetMinSize(Wx::Size->new(88, 16));
$self->{lbl_product_sku}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
$self->{lbl_product_sku}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{tc_product_sku}->SetMinSize(Wx::Size->new(300, 30));
$self->{tc_product_sku}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{lbl_ttb_sku}->SetMinSize(Wx::Size->new(100, 30));
$self->{lbl_ttb_sku}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
$self->{lbl_ttb_sku}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{tc_ttb_sku}->SetMinSize(Wx::Size->new(300, 30));
$self->{tc_ttb_sku}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{lbl_quantity_add}->SetMinSize(Wx::Size->new(100, 30));
$self->{lbl_quantity_add}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
$self->{lbl_quantity_add}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{tc_quantity_add}->SetMinSize(Wx::Size->new(50, 31));
$self->{tc_quantity_add}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{lbl_quantity_total}->SetMinSize(Wx::Size->new(102, 16));
$self->{lbl_quantity_total}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{tc_quantity_total}->SetMinSize(Wx::Size->new(50, 31));
$self->{tc_quantity_total}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{lbl_quantity_available}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{lbl_location}->SetMinSize(Wx::Size->new(64, 16));
$self->{lbl_location}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
$self->{lbl_location}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{tc_location}->SetMinSize(Wx::Size->new(300, 30));
$self->{tc_location}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{lbl_supplier}->SetMinSize(Wx::Size->new(98, 16));
$self->{lbl_supplier}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
$self->{lbl_supplier}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{ch_supplier}->SetMinSize(Wx::Size->new(300, 29));
$self->{ch_supplier}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{ch_supplier}->SetSelection(0);
$self->{lbl_weight}->SetMinSize(Wx::Size->new(86, 16));
$self->{lbl_weight}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
$self->{lbl_weight}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{tc_weight}->SetMinSize(Wx::Size->new(300, 30));
$self->{tc_weight}->SetFont(Wx::Font->new(13, wxDEFAULT, wxNORMAL, wxNORMAL, 0, "MS Shell Dlg 2"));
$self->{btn_submit}->SetMinSize(Wx::Size->new(125,40));
$self->{btn_submit}->SetBackgroundColour(Wx::Colour->new(220, 148, 255));
$self->{btn_submit}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{btn_clear_form}->SetMinSize(Wx::Size->new(125,40));
$self->{btn_clear_form}->SetBackgroundColour(Wx::Colour->new(220, 148, 255));
$self->{btn_clear_form}->SetFont(Wx::Font->new(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, ""));
$self->{panel_product_details_inner}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
$self->{panel_product_details_outer}->SetBackgroundColour(Wx::Colour->new(239, 96, 2));
# end wxGlade
}

####################################################################################################
sub __do_layout {
	my $self = shift;

# begin wxGlade: MyFrame::__do_layout
$self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sizer_6} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sz_product_details_staticbox}->Lower();
$self->{sz_product_details} = Wx::StaticBoxSizer->new($self->{sz_product_details_staticbox}, wxHORIZONTAL);
$self->{sizer_2} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sizer_15} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{gz_product_details} = Wx::FlexGridSizer->new(9, 2, 0, 0);
$self->{sizer_16} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sizer_7} = Wx::BoxSizer->new(wxVERTICAL);
$self->{grid_sizer_1} = Wx::GridSizer->new(1, 8, 0, 0);
$self->{sizer_5} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sz_product_search_staticbox}->Lower();
$self->{sz_product_search} = Wx::StaticBoxSizer->new($self->{sz_product_search_staticbox}, wxHORIZONTAL);
$self->{sizer_13} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sizer_14} = Wx::BoxSizer->new(wxHORIZONTAL);
$self->{sizer_12} = Wx::BoxSizer->new(wxVERTICAL);
$self->{sizer_12}->Add($self->{lbl_search}, 0, wxALL|wxEXPAND, 5);
$self->{sizer_12}->Add($self->{lbl_title_select}, 0, wxALL|wxEXPAND, 5);
$self->{sizer_12}->Add($self->{lbl_title}, 0, wxALL|wxEXPAND, 5);
$self->{sz_product_search}->Add($self->{sizer_12}, 0, wxEXPAND, 0);
$self->{sizer_14}->Add($self->{tc_search}, 0, wxALL, 5);
$self->{sizer_14}->Add($self->{lbl_match_num}, 0, wxALL, 5);
$self->{sizer_13}->Add($self->{sizer_14}, 1, wxEXPAND, 0);
$self->{sizer_13}->Add($self->{ch_title_select}, 0, wxALL, 5);
$self->{sizer_13}->Add($self->{tc_title}, 0, wxALL, 5);
$self->{sz_product_search}->Add($self->{sizer_13}, 0, wxEXPAND, 0);
$self->{panel_product_search_inner}->SetSizer($self->{sz_product_search});
$self->{sizer_5}->Add($self->{panel_product_search_inner}, 0, wxALL|wxEXPAND, 10);
$self->{panel_product_search_outer}->SetSizer($self->{sizer_5});
$self->{sizer_1}->Add($self->{panel_product_search_outer}, 0, wxEXPAND, 0);
$self->{grid_sizer_1}->Add($self->{bitmap_button_0}, 0, 0, 0);
$self->{grid_sizer_1}->Add($self->{bitmap_button_1}, 0, 0, 0);
$self->{grid_sizer_1}->Add($self->{bitmap_button_2}, 0, 0, 0);
$self->{grid_sizer_1}->Add($self->{bitmap_button_3}, 0, 0, 0);
$self->{grid_sizer_1}->Add($self->{bitmap_button_4}, 0, 0, 0);
$self->{grid_sizer_1}->Add($self->{bitmap_button_5}, 0, 0, 0);
$self->{grid_sizer_1}->Add($self->{bitmap_button_6}, 0, 0, 0);
$self->{grid_sizer_1}->Add($self->{bitmap_button_7}, 0, 0, 0);
$self->{panel_hide_title_matches}->SetSizer($self->{grid_sizer_1});
$self->{sizer_7}->Add($self->{panel_hide_title_matches}, 0, wxALL|wxEXPAND, 5);
$self->{panel_title_matches_outer}->SetSizer($self->{sizer_7});
$self->{sizer_1}->Add($self->{panel_title_matches_outer}, 0, wxEXPAND, 0);
$self->{gz_product_details}->Add($self->{lbl_variation}, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 5);
$self->{gz_product_details}->Add($self->{ch_variation}, 0, wxALL, 5);
$self->{gz_product_details}->Add($self->{lbl_item_id}, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 5);
$self->{gz_product_details}->Add($self->{tc_item_id}, 0, wxALL, 5);
$self->{gz_product_details}->Add($self->{lbl_product_sku}, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
$self->{gz_product_details}->Add($self->{tc_product_sku}, 0, wxALL, 5);
$self->{gz_product_details}->Add($self->{lbl_ttb_sku}, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 5);
$self->{gz_product_details}->Add($self->{tc_ttb_sku}, 0, wxALL, 5);
$self->{gz_product_details}->Add($self->{lbl_quantity_add}, 1, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 5);
$self->{sizer_16}->Add($self->{tc_quantity_add}, 0, wxALL, 5);
$self->{sizer_16}->Add($self->{lbl_quantity_total}, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
$self->{sizer_16}->Add($self->{tc_quantity_total}, 0, wxALL|wxALIGN_RIGHT, 5);
$self->{sizer_16}->Add($self->{lbl_quantity_available}, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
$self->{gz_product_details}->Add($self->{sizer_16}, 0, wxEXPAND, 0);
$self->{gz_product_details}->Add($self->{lbl_location}, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 5);
$self->{gz_product_details}->Add($self->{tc_location}, 0, wxALL, 5);
$self->{gz_product_details}->Add($self->{lbl_supplier}, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 5);
$self->{gz_product_details}->Add($self->{ch_supplier}, 0, wxALL, 5);
$self->{gz_product_details}->Add($self->{lbl_weight}, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 5);
$self->{gz_product_details}->Add($self->{tc_weight}, 0, wxALL, 5);
$self->{gz_product_details}->Add($self->{btn_submit}, 1, wxALL|wxEXPAND|wxFIXED_MINSIZE, 5);
$self->{gz_product_details}->Add($self->{btn_clear_form}, 1, wxALL|wxEXPAND, 5);
$self->{sizer_2}->Add($self->{gz_product_details}, 1, wxEXPAND, 0);
$self->{sizer_2}->Add(20, 20, 0, 0, 0);
$self->{sizer_15}->Add($self->{bmp_default_image}, 0, 0, 5);
$self->{panel_main_image}->SetSizer($self->{sizer_15});
$self->{sizer_2}->Add($self->{panel_main_image}, 1, 0, 0);
$self->{sz_product_details}->Add($self->{sizer_2}, 0, wxEXPAND, 0);
$self->{panel_product_details_inner}->SetSizer($self->{sz_product_details});
$self->{sizer_6}->Add($self->{panel_product_details_inner}, 1, wxALL|wxEXPAND, 10);
$self->{panel_product_details_outer}->SetSizer($self->{sizer_6});
$self->{sizer_1}->Add($self->{panel_product_details_outer}, 1, wxEXPAND, 0);
$self->SetSizer($self->{sizer_1});
$self->Layout();
# end wxGlade
}


####################################################################################################
sub yes_no_dialog {
	my ($self, $message) = @_;
  my $answer = Wx::MessageBox( $message, "YES or NO", wxYES_NO|wxCENTRE|wxICON_QUESTION, undef);
	return ($answer == wxYES) ? 1 : 0;
}

####################################################################################################
sub warning_dialog {
	my ($self, $message) = @_;
  Wx::MessageBox( $message, "WARNING", wxOK|wxCENTRE, $self);
}

####################################################################################################
sub loading_dialog {
	my ($self) = @_;
  my $s = Wx::SplashScreen->new( $self->{images}->{loading},
                         wxSPLASH_CENTRE_ON_PARENT|wxSPLASH_NO_TIMEOUT,
                         3000, undef, -1);
  return $s;
}

####################################################################################################
sub updating_dialog {
	my ($self, $message) = @_;
  my $s = Wx::SplashScreen->new( $self->{images}->{updating},
                            wxSPLASH_CENTRE_ON_PARENT|wxSPLASH_NO_TIMEOUT,
                            3000, undef, -1);
  return $s;
}

####################################################################################################
sub successful_dialog {
	my ($self, $message) = @_;
  Wx::SplashScreen->new( $self->{images}->{success},
                         wxSPLASH_CENTRE_ON_PARENT|wxSPLASH_TIMEOUT,
                         600, undef, -1);
  #sleep 2;
}

####################################################################################################
sub post_update_dialog {
	my ($self, $message) = @_;
  Wx::MessageBox( $message, "VERIFICATION", wxOK|wxCENTRE, $self);
}

####################################################################################################
sub btn_submit_onClick {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_submit_onClick <event_handler>
# end wxGlade

  my $request  = $self->{request_reviseitem_default};
  my $ItemID   = $self->{tc_item_id}->GetValue();
  my $SKU      = $self->{tc_product_sku}->GetValue();			# UPC / manufacturer SKU
  my $TTB_SKU  = $self->{tc_ttb_sku}->GetValue();
  my $Location = $self->{tc_location}->GetValue();
	my $Weight   = $self->{tc_weight}->GetValue();
  my $Supplier = $self->{current_supplier} || ' ';
  my $addQty   = $self->{tc_quantity_add}->GetValue()    || int('0');     # can't add zero
  my $totalQty = $self->{tc_quantity_total}->GetValue()  ; #|| int('0');  # zero is valid, but may cause listing to close (warn user about this)
  my $availQty = $self->{lbl_quantity_available}->GetLabel() || int('0');
  my $Title    = $self->{current_title};
  my $Variation= $self->{current_variation};
  my $VarSpecs = {};
 
  # Validate values
  if ( ! $ItemID )                                  { $self->warning_dialog("ItemID not defined!");                  return 1; }
  if ( ! $SKU or $SKU =~ /.*scan.*sku.*/i )         { $self->warning_dialog("Product SKU not defined!");             return 1; }
  if ( $SKU =~ /^\d+$/ && $SKU !~ /^\d{12,14}$/ )   { $self->warning_dialog("Product SKU is not 12 to 14 digits!");  return 1; }
#  if ( ! $TTB_SKU )                                 { $self->warning_dialog("TTB SKU not defined!");                 return 1; }   # TODO: 
  if ( ! $Title )                                   { $self->warning_dialog("Title not defined!");                   return 1; }
  if ( $addQty !~ /^\d*$/ || $totalQty !~ /^\d*$/ ) { $self->warning_dialog("quantity fields must be numeric");      return 1; }
  if ( $addQty && $totalQty )                       { $self->warning_dialog("You can not set both quantity fields"); return 1; }

  if ( $Location =~ /^(\d)(\w)(\d)$/ ) {
		$Location = uc("$1-$2-$3");
	}

	# Subtitute current values in the request xml
  $request =~ s/__ItemID__/$ItemID/;

	if ( $addQty ) {	# assumes totalQty not set (validation above should prevent that)
		$totalQty = $availQty + $addQty;
  }

  if ( $Variation ) {
    my $spec = $self->{current_variation_specifics};
#    $spec->{SKU} = $TTB_SKU;
    delete $spec->{SKU};
    $VarSpecs->{Variations}->{Variation} = $spec;

    $VarSpecs->{Variations}->{Variation}->{Quantity} = $totalQty
      if ( $totalQty ne '');
#      if ( $totalQty );

    $VarSpecs->{Variations}->{Variation}->{VariationProductListingDetails}->{UPC} = $SKU;

		my $VarSpecsXML = XMLout($VarSpecs, NoAttr=>1, RootName=>undef, KeyAttr=>{});

#    NOTE: skipping SKU update on eBay, we want to be careful about this when we turn on LinnWorks inventory tracking!
    $request =~ s/__VARIATION_SKU__/$VarSpecsXML/;

    $request =~ s/__SINGLE_SKU__//;                   # remove single SKU place holder from XML    
    $request =~ s/__quantityXML__//;                  # remove quantity place holder from XML
  }
  else {
#    NOTE: skipping SKU update on eBay, we want to be careful about this when we turn on LinnWorks inventory tracking!

		# get Item Specifics XML
		my $is_xml='';
		if ( defined $self->{is_map}->{$ItemID} ) {
		  $is_xml = get_item_specifics_xml( $self->{is_map}->{$ItemID}, $SKU );
		}

    $request =~ s/__VARIATION_SKU__//;       # remove variation SKU place holder from XML
    $request =~ s#__SINGLE_SKU__#$is_xml#;   # NOTE: SKU here is UPC (manufacturer SKU), not TTB SKU.

    # add quantity
    if ( $totalQty ) {
      $request =~ s#__quantityXML__#<Quantity>$totalQty</Quantity>#; 
    }
    else {
      $request =~ s/__quantityXML__//; # remove the place holder from the XML
    }
  }

  $self->{request} = $request;
  $self->{objHeader}->remove_header('X-EBAY-API-CALL-NAME');
  $self->{objHeader}->push_header  ('X-EBAY-API-CALL-NAME'=>'ReviseItem' );

#  print Dumper($request);

  # allow for testing by only submitting the request when running in production environment
  if ( $PROD_ENVIRONMENT ) {
    my $verification_ok;
    if ( $totalQty =~ /^\s*0+\s*$/ ) {
 		  $verification_ok = $self->yes_no_dialog("Setting Quantity to zero may close the listing, are you sure you want to do this?");
      return if ( ! $verification_ok );
    }

	  ################################################################################
	  # Upsert to Storage Location Table
	  ################################################################################
		my $sql = $self->{sql}->{upsert_storage_location};
		my $sth = $self->{dbh}->prepare( $sql ) or die "can't prepare stmt";

		# TODO: temporary solution to Cost?
		
    my $i = $self->{item_lookup_table}->{ $Title };

#		print "\n\nUPSERT: '$ItemID', '$SKU', '$TTB_SKU', '$Location', '$Title', '$Variation',$Weight,'$Supplier' \n\n";

		my $data =<<DATA;
Title: $Title

Variation : $Variation

SKU        : $SKU
Weight    : $Weight
Supplier  : $Supplier
Location  : $Location

DATA

#		$verification_ok = $self->yes_no_dialog("Is the following information correct?\n\n$data");
    $verification_ok=1;

		if ( $verification_ok ) {
      my $splash = $self->updating_dialog();

			# Update info on database (Inventory table)
		  $sth->execute($ItemID, $SKU, $TTB_SKU, $Location, $Title, $Variation, $Weight,$Supplier) or die "can't execute query";

		  # Submit Revise Item request
			$self->submit_request();

      $splash->Destroy();
      $self->successful_dialog();
		}
		else {
			$self->warning_dialog('Please enter the correct information and resubmit');
		}

  } # end PROD_ENVIRONMENT


  if ( ! $Variation ) {
    # Clear everthing, but title, because often the user wants a similar item
    my $title = $self->{current_title};
  #  $self->btn_clear_form_onClick(0);
    $self->{tc_title}->Clear();
    $self->{ch_variation}->Clear();
    $self->{tc_item_id}->Clear();
    $self->{tc_product_sku}->Clear();
    $self->{tc_ttb_sku}->Clear();
    $self->{tc_quantity_add}->Clear();
    $self->{tc_quantity_total}->Clear();
    $self->{tc_location}->Clear();
    $self->{tc_weight}->Clear();
    $self->{ch_supplier}->SetSelection(0);
    $self->{lbl_quantity_available}->SetLabel( '' );
    $self->{current_title}='';
    $self->{current_variation}='';
    $self->{current_supplier}='';
    $self->{current_variation_specifics}='';
    $self->{current_image}='';
    $self->{bmp_default_image}->SetBitmap( $self->{image_default} );
    $self->{tc_search}->SetFocus();
    $self->{tc_search}->SetSelection(-1,-1);
  }
  else {
    # Clear everything except title/variation info
    $self->{tc_product_sku}->Clear();
    $self->{tc_ttb_sku}->Clear();
    $self->{tc_quantity_add}->Clear();
    $self->{tc_quantity_total}->Clear();
    $self->{tc_location}->Clear();
    $self->{tc_weight}->Clear();
		#$self->{ch_supplier}->SetSelection(0);
    $self->{lbl_quantity_available}->SetLabel( '' );

    # Set focus back to variation
    $self->{ch_variation}->SetFocus();
    $self->{ch_variation}->SetSelection(0);
  }
  $self->Layout();
  $self->Refresh() if ( $REFRESH );
}


####################################################################################################
sub btn_clear_form_onClick {
	my ($self, $event) = @_;
# wxGlade: MyFrame::btn_clear_form_onClick <event_handler>
# end wxGlade

  $self->{tc_search}->Clear();
  $self->{ch_title_select}->Clear();
  $self->{tc_title}->Clear();
  $self->{ch_variation}->Clear();
  $self->{tc_item_id}->Clear();
  $self->{tc_product_sku}->Clear();
  $self->{tc_ttb_sku}->Clear();
  $self->{tc_quantity_add}->Clear();
  $self->{tc_quantity_total}->Clear();
  # $self->{lbl_search_output}->SetLabel( ' ' );
  $self->{tc_location}->Clear();
  $self->{tc_weight}->Clear();
  $self->{ch_supplier}->SetSelection(0);
  $self->{lbl_quantity_available}->SetLabel( '' );

  $self->{tc_search}->SetFocus();

  $self->{current_title}='';
  $self->{current_variation}='';
  $self->{current_supplier}='';
  $self->{current_variation_specifics}='';
  $self->{current_image}='';

  $self->{bmp_default_image}->SetBitmap( $self->{image_default} );
  $self->Layout();
  $self->Refresh() if ( $REFRESH );
}


####################################################################################################
sub getCurrentItemInfo() {
	my ($self, $event) = @_;
  my $request  = $self->{request_getitem_default};
  my $ItemID   = $self->{tc_item_id}->GetValue();

	# Show "loading" splash screen
  my $splash = $self->loading_dialog();

	# Get Item info from eBay
	$request =~ s/__ItemID__/$ItemID/;
	$self->{request}   = $request;
  $self->{objHeader}->remove_header('X-EBAY-API-CALL-NAME');
  $self->{objHeader}->push_header  ('X-EBAY-API-CALL-NAME'=>'GetItem' );
	my $response_hash  = $self->submit_request();

	my $sku   = $response_hash->{Item}->{SKU};  # Note: the TTB SKU is inserted into the "real" SKU field on ebay.
	my $upc       = get_UPC($response_hash->{Item}->{ItemSpecifics});  # UPC / Manufacturer SKU
	my $gross_qty = $response_hash->{Item}->{Quantity};
	my $sold_qty  = $response_hash->{Item}->{SellingStatus}->{QuantitySold};
	my $avail_qty = $gross_qty - $sold_qty;

	$self->{is_map}->{$ItemID} = $response_hash->{Item}->{ItemSpecifics};

	$self->{lbl_quantity_available}->SetLabel( $avail_qty );
	if ($sku) {
	  $self->{tc_ttb_sku}->SetValue( $sku ) 
	}

	# Check to see if this item is already in the Storage Location table
	my $sql = $self->{sql}->{get_storage_location_no_var};
	my $sth = $self->{dbh}->prepare( $sql ) or die "can't prepare stmt";
	my $title = $self->{current_title};
	$sth->execute($title) or die "can't execute query";

	my $hr_result = $sth->fetchall_hashref('title');
	if ( scalar(keys %$hr_result) == 1) {
 	  my $item = $hr_result->{$title};

		print "\n***************************************************\n";
		print Dumper($item);
		print "***************************************************\n";

    # Note: $item->{ttb_sku} is the value in the storage_location table
    #       $ttb_sku         is the value stored on EBAY

		# verify Storage Location / SKU table info VS. eBay info     
		if ( $item->{sku} && $sku eq '' ) {
			  #TODO: commented this line out temporarily. Seems like there are a LOT of items that now have a different item number,
        #      therefore, they have lost their sku on eBay.
        #$self->warning_dialog("This product has a SKU of '$item->{sku}' in the database, BUT it is NOT set on Ebay");
	      print STDERR "\nItem (Database): ", Dumper($item);
		}
		
		$self->{tc_product_sku}->SetValue( $upc || $item->{upc} );	
		$self->{tc_ttb_sku}->SetValue    ( $item->{sku} );	
		$self->{tc_location}->SetValue   ( $item->{location} );	
		$self->{tc_weight}->SetValue       ( $item->{weight} );	
		print "\nSUPPLIER: '$item->{supplier}'";
		$self->{ch_supplier}->SetSelection( $all_suppliers_idx{$item->{supplier}} );
		$self->{current_supplier}=$item->{supplier};

		# Set Focus
		if ( ! $upc and ! $item->{upc} ) {
			$self->{tc_product_sku}->SetFocus();
			$self->{tc_product_sku}->SetSelection(-1,-1);
		}
		elsif ( ! $item->{sku} ) {
			$self->{tc_ttb_sku}->SetFocus();
			$self->{tc_ttb_sku}->SetSelection(-1,-1);
		}
		elsif ( ! $item->{location} ) {
			$self->{tc_location}->SetFocus();
			$self->{tc_location}->SetSelection(-1,-1);
		}
		elsif ( ! $item->{weight} ) {
			$self->{tc_location}->SetFocus();
			$self->{tc_location}->SetSelection(-1,-1);
		}

  }
  elsif (scalar(keys %$hr_result) > 1)  {
    my $message = "More than one row returned. \nebayitemid '$ItemID' \nsql: '$sql' \n";
		$self->warning_dialog($message);
    die $message;
  }

  $splash->Destroy();
}


####################################################################################################
sub getCurrentItemVariationInfo() {
	my ($self, $event) = @_;
  my $request  = $self->{request_getitem_default};
  my $ItemID   = $self->{tc_item_id}->GetValue();
  my $title    = $self->{current_title};
	$request =~ s/__ItemID__/$ItemID/;

	$self->{request}   = $request;
  $self->{objHeader}->remove_header('X-EBAY-API-CALL-NAME');
  $self->{objHeader}->push_header  ('X-EBAY-API-CALL-NAME'=>'GetItem' );

	# Show "loading" splash screen
  my $splash = $self->loading_dialog();

#	print "\nGetItem Request: ",Dumper( $request );
	my $response_hash = $self->submit_request();
#	print "\nGetItem Response: ", Dumper($response_hash);

	my $variations = {};
	my $vr = ref($response_hash->{Item}->{Variations}->{Variation}) eq 'ARRAY' 
					 ? $response_hash->{Item}->{Variations}->{Variation}
					 : [ $response_hash->{Item}->{Variations}->{Variation} ]
					 ;

	# TODO: shouldn't have to build this hash every time....
	for my $vh ( @{$vr} ) {
    my $value = ref($vh->{VariationSpecifics}->{NameValueList}) eq 'ARRAY' 
                ? $vh->{VariationSpecifics}->{NameValueList}->[0]->{Value}
                : $vh->{VariationSpecifics}->{NameValueList}->{Value};

																																							# NOTE: On Variations, the 'Quantity' field is Total Quantity, BUT
		$vh->{Quantity} = $vh->{Quantity} - $vh->{SellingStatus}->{QuantitySold}; # when we revise the item, the 'Quantity' field represents 
																																							# ONLY the Available (i.e. actual) Quantity!
		my $qty  = $vh->{Quantity};
		my $sku  = $vh->{SKU};
		my $upc  = $vh->{VariationProductListingDetails}->{UPC};

    $variations->{$value}->{ALL_VALUES} = $vh;
		$variations->{$value}->{availableQuantity} = $qty;
		$variations->{$value}->{SKU} = $sku; 							# TTB SKU should be in the SKU field
		$variations->{$value}->{UPC} = $upc; 							# UPC / Manufacturer SKU
	}

	my $var = $self->{current_variation};
  $self->{current_variation_specifics} = $variations->{$var}->{ALL_VALUES};

  # Fix some of the values, they are not all needed in the output and/or
  # are needed in a different format
  delete( $self->{current_variation_specifics}->{SellingStatus} );
  $self->{current_variation_specifics}->{StartPrice} = $self->{current_variation_specifics}->{StartPrice}->{content};

	my $sku   = $variations->{$var}->{SKU};
	my $upc       = $variations->{$var}->{UPC};
	my $avail_qty = $variations->{$var}->{availableQuantity};

	$self->{lbl_quantity_available}->SetLabel( $avail_qty );

	# NOTE: maybe we shouldn't populate this from the value found on ebay?
  #
  #  With Linnworks it MUST be correct on eBay, so it's safe to update the table with the eBay value.
  #
	if ($sku) {
	  $self->{tc_ttb_sku}->SetValue( $sku ) 
	}

	# Check to see if this item is already in the Storage Location table
	my $sql = $self->{sql}->{get_storage_location_var};
	my $sth = $self->{dbh}->prepare( $sql ) or die "can't prepare stmt";
	$sth->execute($title,$var) or die "can't execute query";

	# TODO: testing
#	print "TITLE: '$title',  VAR: '$var', ITEMID: '$ItemID'";

	my $hr_result = $sth->fetchall_hashref('title');   #NOTE: changed from ebayitemid to title
	if ( scalar(keys %$hr_result) == 1) {
 	  my $itemvar = $hr_result->{$title};			# NOTE:  ItemID is from eBay, however this can differ from what's in Inventory table
                                            #        The SOLUTION is to run this program with the -u option to get current ebayItemID.
    $itemvar->{ebayitemid}=$ItemID;

		$self->{tc_product_sku}->SetValue( $upc || $itemvar->{upc} );	
		$self->{tc_ttb_sku}->SetValue    ( $itemvar->{sku} );	
		$self->{tc_location}->SetValue   ( $itemvar->{location} );	
		$self->{tc_weight}->SetValue       ( $itemvar->{weight} || '0');	
		$self->{ch_supplier}->SetSelection( $all_suppliers_idx{ $itemvar->{supplier} } );
		$self->{current_supplier}=$itemvar->{supplier};
  }
  elsif (scalar(keys %$hr_result) > 1)  {
    my $message = "More than one row returned. \ntitle '$title' \nvariation '$var' \nsql: '$sql' \n";
		$self->warning_dialog($message);
    die $message;
  }

  $splash->Destroy();
}


####################################################################################################
# TC_SEARCH - TEXT_ENTER EVENT
####################################################################################################
sub evt_tc_search_Text_Enter {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_tc_search_Text_Enter <event_handler>
# end wxGlade

  if ( $self->{current_title} ) {
    my $title = $self->{current_title};
    my $i     = $self->{item_lookup_table}->{ $title };
    $self->{current_supplier}='';
    $self->{current_variation} = '';
    $self->{current_variation_specifics} = '';

    # Display values, clear previous values (if you are just switching variations
    $self->{lbl_match_num}->SetLabel    ('Item found!');
    $self->{tc_title}->SetValue         ( $title );      
    $self->{tc_item_id}->SetValue       ( $i->{itemid} );
    $self->{tc_ttb_sku}->SetValue       ( '' );
    $self->{tc_product_sku}->SetValue   ( '' );  # Can be overwritten later if item exists in Inventory table
    $self->{tc_quantity_add}->SetValue  ( '' );
    $self->{tc_quantity_total}->SetValue( '' );
    $self->{lbl_quantity_available}->SetLabel( '' );
    $self->{tc_location}->SetValue      ( '' );
    $self->{tc_weight}->Clear();
		#$self->{ch_supplier}->Clear();  # same variation = same supplier, so don't clear it!

    $self->load_image( $title )
      if ( ! $i->{image} );
    $self->{current_image} = $i->{image};   # loaded in the load_image() method

    # $self->{panel_hide_title_matches}->Show(0);    # DON'T hide the pictures at the bottom

		# Display the image
		#$self->{panel_title_matches_outer}->Show(0);
		#$self->{panel_main_image}->Show(1);
    $self->{bmp_default_image}->SetBitmap( $self->{current_image} );
	  $self->{bmp_default_image}->SetMinSize( Wx::Size->new($PIC_MAXH,$PIC_MAXW) );
	  $self->{bmp_default_image}->SetSize( $self->{bmp_default_image}->GetBestSize() );
    $self->{bmp_default_image}->SetToolTip($title);
    #$self->Fit();
    $self->Layout();
    #$self->{sizer_15}->Fit( $self->{panel_2} );
    $self->Refresh() if ( $REFRESH );

    # populate variations choice box (drop down)
    if ( @{$i->{variations}} ) {																# HAS VARIATIONS
      $self->{ch_variation}->Clear();
      $self->{ch_variation}->Append('Select a variation');
      $self->{ch_variation}->SetFocus();
      $self->{ch_variation}->SetSelection(0);
      for ( sort {lc $a cmp lc $b} @{$i->{variations}} ) {
        $self->{ch_variation}->Append($_);
      }
    }
    else {																											# NO VARIATIONS
      $self->{ch_variation}->Clear();
      $self->{ch_variation}->Append('No variations');
      $self->{ch_variation}->SetSelection(0);

			# Look up this record in the storage location table and on eBay
			# to get current product SKU, TTB SKU, and total quantity
			$self->getCurrentItemInfo();

			if ( ! $self->{tc_product_sku}->GetValue() ) {
			  $self->{tc_product_sku}->SetValue   ( 'scan product sku here' );
			  $self->{tc_product_sku}->SetFocus();
			  $self->{tc_product_sku}->SetSelection(-1,-1);
			}
    }

  }
	else {
    # More than one title match found
  	# Is this a UPC?
# 		my $title = $self->{tc_search}->GetValue();
#   	if ( $title =~ /^\d{8}\d+$/ ) {
#   	  if ( $self->{upc_lookup_table}->{$title} ) {
#   		  $self->{tc_search}->SetValue( "$self->{upc_lookup_table}->{$title}");
# 				$self->evt_tc_search_Text_Enter(0);
#       }
#       else {
  		  $self->{tc_search}->SetFocus();
  		  $self->{tc_search}->SetSelection(-1,-1);
#			}
#  	}
	}

}


####################################################################################################
sub evt_tc_search_Text {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_tc_search_Text <event_handler>
# end wxGlade

  my $search_words = $event->GetString();

	# all searchable "titles" (includes sku's)
	my @titles_found = @{ $self->{all_titles_lookup} };

  for my $s ( split /\s+/, $search_words ) {
		$s = quotemeta($s);
		@titles_found = grep { /.*$s.*/i } @titles_found;
  }

	# "title" in this case, can also be a upc
  if ( @titles_found==1 && $self->{upc_lookup_table}->{ $titles_found[0] } ) {
    @titles_found = keys %{$self->{upc_lookup_table}->{ $titles_found[0] }};
  }

  $self->{lbl_match_num}->SetLabel( scalar(@titles_found) . ' matches');
	$self->Refresh();

  if ( @titles_found <= $PIC_LIMIT+1 ) {
    
    #$self->{panel_hide_title_matches}->Show(1);   # no need to 'unhide' the panel since we are no longer hiding it 

    @titles_found = sort @titles_found;
    my $all_titles =  "\n" . join("\n", @titles_found) . "\n\n";
    
    # $self->{lbl_search_output}->SetLabel( $all_titles );

		# Build the title dropdown box
    $self->{ch_title_select}->Clear();
    $self->{ch_title_select}->Append('Select a title');
    $self->{ch_title_select}->SetSelection(0);
    for ( @titles_found ) {
      $self->{ch_title_select}->Append($_);
    }

		#$self->{panel_main_image}->Show(0);
    #$self->{panel_title_matches_outer}->Show(1);
    for my $i ( 0..$PIC_LIMIT ) {
#      if ( defined $titles_found[$i] ) 
      if ( $titles_found[$i] && 
           defined $self->{item_lookup_table}->{$titles_found[$i]} ) {
        my $title = $titles_found[$i];
        my $r = $self->{item_lookup_table}->{ $title };
        $self->load_image($title)
          if ( ! $r->{thumbnail} );

        $self->{"bitmap_button_$i"}->SetBitmapLabel( $r->{thumbnail} );       # image shown when button is enabled
        $self->{"bitmap_button_$i"}->Enable(1);                               # enable the button (image) to handle the click event
        $self->{"bitmap_button_$i"}->SetLabel($title);                        # label text
        $self->{"bitmap_button_$i"}->SetToolTip($title);                      # pop-up tool tip
	      #$self->{"bitmap_button_$i"}->SetSize($self->{"bitmap_button_$i"}->GetBestSize());
	      $self->{"bitmap_button_$i"}->SetSize( Wx::Size->new($TPIC_MAXW,$TPIC_MAXW) );
      }
      else {
        $self->{"bitmap_button_$i"}->Enable(0);                               # disables button. automatically shows 'disabled' image
	      $self->{"bitmap_button_$i"}->SetSize( Wx::Size->new($TPIC_MAXW,$TPIC_MAXW) );
      }
    }

    if ( @titles_found == 1 ) {
      $self->{current_title} = $titles_found[0];
			# $self->evt_tc_search_Text_Enter(0);					# if you automatically switch and the user keeps typing, that extra
			# 																					  # text appears in the product sku, because the sku field has received the focus.
    }
		else {
      # wipe out previous results
      $self->{current_title} = '';
      $self->{current_variation} = '';
      $self->{current_supplier}='';
      $self->{current_variation_specifics} = '';
      $self->{current_image} = '';
			$self->{bmp_default_image}->ClearBackground();
      $self->{tc_title}->Clear();
      $self->{ch_variation}->Clear();
      $self->{tc_item_id}->Clear();
      $self->{tc_product_sku}->Clear();
      $self->{tc_ttb_sku}->Clear();
      $self->{tc_quantity_add}->Clear();
      $self->{tc_quantity_total}->Clear();
      $self->{tc_location}->Clear();
    }

		$self->Layout();
		$self->Refresh() if ( $REFRESH );
  }

}


####################################################################################################
sub evt_ch_variation_choice {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_ch_variation_choice <event_handler>
# end wxGlade
  my $selection = $event->GetSelection();  # number
  my $variation = $event->GetString();     # text
	my $title     = $self->{current_title};
  my $ItemID    = $self->{tc_item_id}->GetValue();

  if ( $selection ) {
    $self->{current_variation} = $variation;

		# Look up this record in the storage location table and on eBay
		# to get current product SKU, TTB SKU, and total quantity
		$self->getCurrentItemVariationInfo();
    my $upc = $self->{tc_product_sku}->GetValue();
    my $weight = $self->{tc_weight}->GetValue();

    # Get and Display Image
    my $variation_pic = $self->{item_lookup_table}->{ $title }->{variation_images}->{ $variation };
    my $remote_image = $variation_pic
                     ? $variation_pic
                     : $self->{item_lookup_table}->{ $title }->{primaryPicture};

    my $local_image = $remote_image;

		if ( $local_image =~ /^http.*?=.*/ ) {
			$local_image =~ s#^http.*?=/##;
			$local_image =~ s#/#_#g;
		}
    $local_image =~ s#.*/##;
    $local_image =~ s#\?.*$##;
    $local_image = "image/cache/$local_image";

		if ( ! -e $local_image ) {
	    my $status = getstore($remote_image, $local_image);
			if ( ! is_success($status) ) {
		  	warn "Can not retrieve image from ebay";
			  # If no image was assigned, set to default
			  $self->{current_image} = $self->{image_default};
				$local_image = '';
		  }
		}

    if ( $local_image ) {
	      # Store BitMap image
	      my $image = Wx::Image->new($local_image, wxBITMAP_TYPE_ANY );
        $self->rescale_image( $image, $PIC_MAXH, $PIC_MAXW );
	      $self->{current_image} = Wx::Bitmap->new( $image );
    }

		# Display the image
	  $self->{bmp_default_image}->SetMinSize( Wx::Size->new($PIC_MAXH,$PIC_MAXW) );
    $self->{bmp_default_image}->SetBitmap( $self->{current_image} );

    $self->{tc_quantity_add}->SetValue  ( '' );
    $self->{tc_quantity_total}->SetValue( '' );

		# Check to see if this item is already in the Storage Location table
		my $sql = $self->{sql}->{get_storage_location_var};
		my $sth = $self->{dbh}->prepare( $sql ) or die "can't prepare stmt";
		$sth->execute($self->{current_title},$variation) or die "can't execute query";

		my $hr_result = $sth->fetchall_hashref('ebayitemid');
		if ( scalar(keys %$hr_result) ) { 
			my $item = $hr_result->{$ItemID};
			$self->{tc_product_sku}->SetValue( $upc || $item->{upc} );	
			$self->{tc_ttb_sku}->SetValue    ( $item->{sku} );	
			$self->{tc_location}->SetValue   ( $item->{location} );	

			# Set Focus
			if ( ! $upc and ! $item->{upc} ) {
			  $self->{tc_product_sku}->SetFocus();
			  $self->{tc_product_sku}->SetSelection(-1,-1);
			}
			elsif ( ! $item->{sku} ) {
			  $self->{tc_ttb_sku}->SetFocus();
			  $self->{tc_ttb_sku}->SetSelection(-1,-1);
			}
			elsif ( ! $item->{location} ) {
			  $self->{tc_location}->SetFocus();
			  $self->{tc_location}->SetSelection(-1,-1);
			}
			elsif ( ! $weight and ! $item->{weight} ) {
			  $self->{tc_location}->SetFocus();
			  $self->{tc_location}->SetSelection(-1,-1);
			}

	  }
		else {
			$self->{tc_ttb_sku}->SetValue       ( '' );
			$self->{tc_location}->Clear();
			$self->{tc_product_sku}->SetValue   ( 'scan product sku here' );
			$self->{tc_product_sku}->SetFocus();
			$self->{tc_product_sku}->SetSelection(-1,-1);
		}

    $self->Layout();
    #$self->Fit();
    $self->Refresh() if ( $REFRESH );

  }
}


####################################################################################################
sub evt_tc_product_sku_text_enter {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_tc_product_sku_text_enter <event_handler>
# end wxGlade
  my $title          = $self->{current_title};
  my $variation      = $self->{current_variation};
  my $ttb_sku_prefix = 'AA';

	# select next sku => max(sku)+1
	my $sql = $self->{sql}->{get_next_sku};
	my $sth = $self->{dbh}->prepare( $sql ) or die "can't prepare stmt";
	$sth->execute() or die "can't execute query";

  # fetch the current value
	my ($next_sku) = $sth->fetchrow_array();

  $next_sku = 1
    if ! $next_sku;	# set default if this is the fist time

  # Format the SKU
  $next_sku = $ttb_sku_prefix . sprintf( '%06d', $next_sku );

  $self->{tc_ttb_sku}->SetValue( $next_sku ); 

  $self->{tc_quantity_add}->SetFocus();
  $self->{tc_quantity_add}->SetSelection(-1,-1);
# $self->{tc_location}->SetFocus();
# $self->{tc_location}->SetSelection(-1,-1);
}


####################################################################################################
sub evt_ch_title_select_Choice {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_ch_title_select_Choice <event_handler>
# end wxGlade
  my $title = $event->GetString();
  $self->{current_title} = $title;
  $self->evt_tc_search_Text_Enter(0);
}


####################################################################################################
sub evt_tc_quantity_add_Text_Enter {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_tc_quantity_add_Text_Enter <event_handler>
# end wxGlade
	$self->{tc_quantity_total}->Clear();
	$self->{tc_location}->SetFocus();
}


####################################################################################################
sub evt_tc_quantity_total_Text_Enter {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_tc_quantity_total_Text_Enter <event_handler>
# end wxGlade
	$self->{tc_quantity_add}->Clear();
	$self->{tc_location}->SetFocus();
}


####################################################################################################
sub evt_tc_location_text_enter {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_tc_location_text_enter <event_handler>
# end wxGlade
	$self->{ch_supplier}->SetFocus();
}


####################################################################################################
sub evt_ch_supplier_choice {
	my ($self, $event) = @_; 
# wxGlade: MyFrame::evt_ch_supplier_choice <event_handler>
# end wxGlade
  my $selection = $event->GetSelection();  # number
  my $supplier  = $event->GetString();     # text

  $self->{current_supplier} = $selection ? $supplier : '';

  $self->{tc_weight}->SetFocus();
  $self->{tc_weight}->SetSelection(-1,-1);
}


####################################################################################################
sub evt_tc_weight_text_enter {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_tc_weight_text_enter <event_handler>
# end wxGlade
	$self->{btn_submit}->SetFocus();
}


####################################################################################################
sub evt_tc_cost_text_enter {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_tc_cost_text_enter <event_handler>
# end wxGlade
	$self->{btn_submit}->SetFocus();
}


####################################################################################################
sub evt_button_image_select_clicked {
	my ($self, $event) = @_;
# wxGlade: MyFrame::evt_button_image_select_clicked <event_handler>
# end wxGlade
  my $button = $event->GetEventObject();
  my $title  = $button->GetLabel();

  $self->{current_title} = $title;
  
  $self->evt_tc_search_Text_Enter(0);
}


# end of class MyFrame

####################################################################################################
sub submit_request {
  my $self = shift;

	################################################################################
  # Update Ebay
	################################################################################
  my ($objRequest, $objUserAgent, $objResponse);
  my $request_sent_attempts = 0;

  RESEND_REQUEST:
  $request_sent_attempts++;

  # Create UserAgent and Request objects
  $objUserAgent = LWP::UserAgent->new;
  $objRequest   = HTTP::Request->new(
    "POST",
    "https://api.ebay.com/ws/api.dll",
    $self->{objHeader},
    $self->{request}
  );

  # Submit Request
  $objResponse = $objUserAgent->request($objRequest);		# SEND REQUEST

  # Parse Response object to get Acknowledgement 
  my $response_hash = XMLin( $objResponse->content,ForceArray=>['Variation','NameValueList','VariationSpecificPictureSet'] );
  my $ack = $response_hash->{Ack};

  if (!$objResponse->is_error && $ack =~ /success/i ) {
		#print "\n\n";
		#print  "Status          : Success\n";
		#print  "Object Content  :\n";
		#print  $objResponse->content;
		#print Dumper( $response_hash );

    return $response_hash;
  }
  else {
		print "\n\n";
    print  "Response msg.   : ", Dumper( $response_hash->{Errors} );
    print  "Status          : FAILED";
    print  $objResponse->error_as_HTML;

    # Resend update request
    if ( $request_sent_attempts < 1 ) {
      print  "Attempting to resend update request.\n";
      goto RESEND_REQUEST;
    }
  }

} # end submit_request()

sub load_image {
  my ($self,$title) = @_;

  my $r = $self->{item_lookup_table}->{ $title };

  return 
    if ( $r->{image} && $r->{thumbnail} );

  # Get Images
  my $local_image = $r->{primaryPicture};

  if ( $local_image =~ /^http.*?=.*/ ) {
    $local_image =~ s#^http.*?=/##;
    $local_image =~ s#/#_#g;
	}
  $local_image =~ s#.*/##;
  $local_image =~ s#\?.*$##;
  $local_image = "image/cache/$local_image";

  if ( ! -e $local_image ) {
    my $status;
		eval {
      $status = getstore($r->{primaryPicture}, $local_image);
			print "\nSTATUS: '$status'\n";
			print Dumper($r);
		};
    if ( $@ || ! is_success($status) ) {
      warn "\n\nCan not retrieve image: '$r->{primaryPicture}'\n\n";
      # If no image was assigned, set to default
      $r->{image} = $self->{image_default};
      $r->{thumbnail} = $self->{image_default_128};
      $local_image = '';
    }
  }

  if ( $local_image && ! ($r->{image} && $r->{thumbnail}) ) {
      # Store BitMap image
      my $image     = Wx::Image->new($local_image, wxBITMAP_TYPE_ANY );
      my $thumbnail = $image;
      
      # Primary Picture - Resize
      $self->rescale_image( $image, $PIC_MAXH, $PIC_MAXW );
      $r->{image} = Wx::Bitmap->new( $image );

      # Thumbnail - Resize
      $self->rescale_image( $thumbnail, $TPIC_MAXH, $TPIC_MAXW );
      $r->{thumbnail} = Wx::Bitmap->new($thumbnail); 
  }
}

sub rescale_image {
  my ($self, $image, $max_height, $max_width) = @_;
  my $h = $image->GetHeight();
  my $w = $image->GetWidth();

  if ( $h > $w ) {
    if ( $h > $max_height ) {
        my $aspect_ratio = $w/$h;
        $h = $h > $max_height ? $max_height : $h;
        $w = $h * $aspect_ratio;
        $image->Rescale($w,$h);
    }
  }
  else {
    if ( $w > $max_width ) {
        my $aspect_ratio = $h/$w;
        $w = $w > $max_width ? $max_width : $w;
        $h = $w * $aspect_ratio;
        $image->Rescale($w,$h);
    }
  }

  return $image;
}

# GET UPC
sub get_UPC {
	my $is = shift;   # item->{ItemSpecifics}

	# Search Item Specifics for UPC
	for my $s ( @{$is->{NameValueList}} ) {
		next unless ( $s->{Name} eq 'UPC' );
		return $s->{Value}; # found UPC
	}

  return ''; # did not find UPC
}

# GET UPC
sub get_Brand {
	my $is = shift;   # item->{ItemSpecifics}

	# Search Item Specifics for Brand
	for my $s ( @{$is->{NameValueList}} ) {
		next unless ( $s->{Name} =~ /^brand$/i );
		return $s->{Value}; # found UPC
	}

  return ''; # did not find UPC
}

# GET ITEM SPECIFICS XML
sub get_item_specifics_xml {
	my $is  = shift;   # item->{ItemSpecifics}
	my $upc = shift;
	my $xml = '';

	# build hash of 
	my $ish;
	$ish->{ItemSpecifics}->{NameValueList} = [];
	for my $s ( @{$is->{NameValueList}} ) {
		push($ish->{ItemSpecifics}->{NameValueList}, { Name=>$s->{Name}, Value=>$s->{Value} } );
	}

	# overwrites UPC item specific, if it existed
  push($ish->{ItemSpecifics}->{NameValueList}, { Name=>'UPC', Value=>$upc } )
	  if ($upc);

  $xml = XMLout($ish, NoAttr=>1, RootName=>undef, KeyAttr=>{})
	  if ( $is or $upc );

	return $xml;
}

1;

1;

package main;

unless(caller){
  no warnings;
	local *Wx::App::OnInit = sub{1};
  use warnings;
	my $app = Wx::App->new();
	Wx::InitAllImageHandlers();

	my $frame_1 = MyFrame->new();

	$app->SetTopWindow($frame_1);
	$frame_1->Show(1);
	$app->MainLoop();
}
