#!/usr/bin/perl -w 
# generated by wxGlade 0.6.5 (standalone edition) on Fri Nov 30 13:55:30 2012
# To get wxPerl visit http://wxPerl.sourceforge.net/

use strict;
use LWP::UserAgent;
use LWP::Simple;
use HTTP::Request;
use HTTP::Headers;
use HTML::Restrict;
use DBI;
use XML::Simple qw(XMLin XMLout);
# use XML::Tidy;
use Date::Calc 'Today';
use Data::Dumper 'Dumper';			$Data::Dumper::Sortkeys = 1;
use File::Copy qw(copy move);
use POSIX;
use Getopt::Std;
use Storable 'dclone';

my %opts;
getopts('i:raDI:O:A',\%opts);
# -i <ebay item ID>		- perform operations on this single item
# -a                  - perform operations on all items
# -r 									- revise item(s)
# -D                  - Debug/verbose mode. 
# -I <filename>       - Input filename. csv format (same as output. PUT NEW VALUE IN THE "TOTAL SHIPPING COST" column)
# -O <filename>       - output filename base. default is 'product_import'
my @item_list;
my $process_all_items = 0;

if ( defined $opts{i} ) {
	@item_list = split(',',$opts{i});
}
elsif ( defined $opts{a} ) {
  $process_all_items = 1;
}
else {
	die "must supply option '-i <item id>'";
}

my $REVISE_ITEM = defined $opts{r} ? 1 : 0;
my $DEBUG       = defined $opts{D} ? 1 : 0;
my $infile      = defined $opts{I} ? $opts{I} : '';
my $outfile     = defined $opts{O} ? $opts{O} : 'dump';
my $ReturnAll   = defined $opts{A} ? 1 : 0;


###################################################:1
# EBAY API INFO                                   #
###################################################

my $call_name = 'findItemsAdvanced';

my $header = HTTP::Headers->new;
$header->push_header('X-EBAY-SOA-GLOBAL-ID'         => 'EBAY-US');
$header->push_header('X-EBAY-SOA-SERVICE-VERSION'   => '1.13.0');
$header->push_header('X-EBAY-SOA-SECURITY-APPNAME'  => 'KenCicog-a670-43d6-ae0e-508a227f6008');
$header->push_header('X-EBAY-SOA-OPERATION-NAME'    => $call_name );


my $request_finditem_default = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<${call_name}Request xmlns="http://www.ebay.com/marketplace/search/v1/services">
  <Seller>cookiedough27</Seller>
  <keywords>Street Style Auto Return Hyper Spin Yo-yo Yo Yo</keywords>
  <outputSelector>GalleryInfo</outputSelector>
  <outputSelector>PictureURLLarge</outputSelector>
  <outputSelector>PictureURLSuperSize</outputSelector>
  <outputSelector>SellerInfo</outputSelector>
  <outputSelector>StoreInfo</outputSelector>
  <outputSelector>UnitPriceInfo</outputSelector>
</${call_name}Request>
END_XML
#  <storeName>The Teaching Toy Box</storeName>


###########################################################
# END EBAY API INFO                                       #
###########################################################

my $request;
my $response_hash;

################################################################################
# Get list of all item id's
################################################################################
my @all_items;
my $pagenumber=1;
my $maxpages=1000000;

if ( ! $process_all_items ) {
	push(@all_items,@item_list);
}
else {
  die;
}

my $all_items_count = scalar @all_items;


################################################################################
# Loop over each item (active on eBay)
################################################################################
for my $item_id ( reverse @all_items ) {
  # Get detailed info from ebay on this itemID
  $request = $request_finditem_default;

  #print Dumper($request);
  my $ebayResponse = submit_request( '', $request, $header );
  #print Dumper($ebayResponse);

  for my $ebayListing ( @{$ebayResponse->{searchResult}->{item}} ) {
    print Dumper($ebayListing);
  }
}

print "\n\n";
exit;

####################################################################################################

sub submit_request {
	my ($call_name, $request, $objHeader) = @_;
  my ($objRequest, $objUserAgent, $objResponse);
  my $request_sent_attempts = 0;

  RESEND_REQUEST:
  $request_sent_attempts++;

  # Create UserAgent and Request objects
  $objUserAgent = LWP::UserAgent->new;
  $objRequest   = HTTP::Request->new(
    "POST",
#    "https://api.ebay.com/ws/api.dll",
    "http://svcs.ebay.com/services/search/FindingService/v1",
    $objHeader,
    $request
  );

	#print "\n objHeader : ",Dumper($objHeader);
	#print "\n request   : ",Dumper($request);
	#print "\n objRequest: ",Dumper($objRequest);

  # Submit Request
  $objResponse = $objUserAgent->request($objRequest);		# SEND REQUEST

  #print Dumper($objResponse);

  # Parse Response object to get Acknowledgement 
	my $content =  $objResponse->content;
	my $response_hash = XMLin( "$content",  
      ForceArray=>['InternationalShippingServiceOption','ShippingServiceOptions','ShipToLocation','Variation','NameValueList', ] );
	#my $response_hash = XMLin( $content );
  my $ack = $response_hash->{Ack};

  if (!$objResponse->is_error) {
		#print "\n\n";
		#print  "Status          : Success\n";
		#print  "Object Content  :\n";
		#print  $objResponse->content;
		#print Dumper( $response_hash );

    return $response_hash;
  }
  else {
		print "\n\n";
    print  "\nResponse msg.   : ", Dumper( $response_hash->{Errors} );
    print  "\nStatus          : FAILED";
    print  "\nError message as html  : \n", $objResponse->error_as_HTML;

    # Resend update request
    if ( $request_sent_attempts < 1 ) {
      print  "Attempting to resend update request.\n";
      goto RESEND_REQUEST;
    }

		die;
  }

} # end submit_request()

