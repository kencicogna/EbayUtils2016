#!/usr/bin/perl -w 
# generated by wxGlade 0.6.5 (standalone edition) on Fri Nov 30 13:55:30 2012
# To get wxPerl visit http://wxPerl.sourceforge.net/

use strict;
use LWP::UserAgent;
use LWP::Simple;
use HTTP::Request;
use HTTP::Headers;
use HTML::Restrict;
use DBI;
use XML::Simple qw(XMLin XMLout);
use Date::Calc 'Today';
use Data::Dumper 'Dumper';			$Data::Dumper::Sortkeys = 1;
use File::Copy qw(copy move);
use POSIX;
use Getopt::Std;
use Storable 'dclone';

my %opts;
getopts('O:D',\%opts);
my @item_list;

my $DEBUG   = defined $opts{D} ? 1 : 0;
my $outfile = defined $opts{O} ? $opts{O} : 'all_ebay_categories.csv';


###################################################
# EBAY API INFO                                   #
###################################################

my $header = HTTP::Headers->new;
$header->push_header('X-EBAY-API-COMPATIBILITY-LEVEL' => '899');
$header->push_header('X-EBAY-API-DEV-NAME'  => 'd57759d2-efb7-481d-9e76-c6fa263405ea');
$header->push_header('X-EBAY-API-APP-NAME'  => 'KenCicog-a670-43d6-ae0e-508a227f6008');
$header->push_header('X-EBAY-API-CERT-NAME' => '8fa915b9-d806-45ef-ad4b-0fe22166b61e');
$header->push_header('X-EBAY-API-CALL-NAME' => '');                                       # Supply call name to submit_request() 
$header->push_header('X-EBAY-API-SITEID'    => '0');                                      # 0 => usa
$header->push_header('Content-Type'         => 'text/xml');

# eBayAuthToken
my $eBayAuthToken = 'AgAAAA**AQAAAA**aAAAAA**CQTJVA**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6wHlIKoCZCBogmdj6x9nY+seQ**4EwAAA**AAMAAA**IjIgU4Mg/eixJ7OQDRd60pU4NWyjtHgmki3+78wP5Vdt8qXeUz9lAbiDgkWaTbHHxBS2J+GvPSZZ9c+24CHqWIxORvV0OK1M176YGUAUPY7YXq8Z2XSTUp+pmq7In/SjzNc17Aqg+CUZsYDn1mnyoRGyW3rT5uk6TtCStBcckV1q55Jg0JomVxUtC68NPC+4JDCqOEqHVOok7pTR8dNa7wTZiSZCoKodX7c8wnBStPkGHhw3G3ogeU0FmKudl1IMsV1zUlJ0E5dCq9GF/2wxgQQAdH29RXcVUHKDE5zAXSmUIvrmIRKG2xDOnxUSjsRMQJZ8dN/wEKXtjQK4NYCBqwmqo+7uMsUwbqjF6X320t/eksCLbG8tL+QtLN9PwrpbAUnnMHnn/LI+sEb1BaFHBI0O9eqYKJII/bVaYwFNilqq4qe1wR+qF2Ge9Fa6jYvdKMwhVvYZmily6mIDhJEX4VUQ3B9wx6tx6Bnm49/2LNblVY+toRI+rqdMnjVAQTXPeWzxmUqSK4Ql0Jn7pm0ul7v9Zt9/LYNRpjId7NoEC//q/5rvBxGIBSLe3KzrSR2r/Xuu9IMfrJbq3bvoMBpgr5Iy7+K2vXPmfXkQ3VuXocoAJIvuZTrSLIY6DSqfdc5oxk0RObGcShP+grojI1FpWGULDDYM5Uxlbj3FNSGc7X/U2MslXt0dZ5Ao0dtf4oz63oEHQV1sfEToouUEhML7Sz9exfEfZy35LqR6RuTOXDyTG1gFweFCkK6F54eZgdLZ';

my $request_getStore_default = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetStoreRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
<CategoryStructureOnly>TRUE</CategoryStructureOnly>
</GetStoreRequest>
END_XML


###########################################################
# END EBAY API INFO                                       #
###########################################################

open my $ofh, '>', $outfile or die "can't open file $outfile";

my $request;
my $response_hash;

################################################################################
# Get list of all item id's
################################################################################
my $pagenumber=1;
my $maxpages=1000000;

################################################################################
# Loop over each item (active on eBay)
################################################################################
my $categoryIDHash = {};
my $categoryNameHash = {};

# Get store category names (build hash table lookup by category ID => $categoryIDHash)
$request = $request_getStore_default;
my $ebayStore = submit_request( 'GetStore', $request, $header );
my $esCategories = $ebayStore->{Store}->{CustomCategories}->{CustomCategory};
for my $hr_cat ( @$esCategories ) {
  LoadCategory( $hr_cat, $hr_cat->{Name} );
}

if ( $DEBUG ) {
  print "\n\nCategory ID hash: ",Dumper($categoryIDHash);
  print "\n\nCategory Name hash: ",Dumper($categoryNameHash);
}

# build hash by category heading
my $allcats ={};
for my $cat ( sort keys %$categoryNameHash ) {
  my $heading = $cat;

  $heading =~ s/^(.+?) -> .*/$1/;
  $heading =~ s/[^\w]+/_/g;
  
  $allcats->{$heading}->{$cat} = 1;  
}

# write output file
for my $heading ( sort keys %$allcats ) {
  print $ofh "$heading";
  for my $cat ( sort keys %{$allcats->{$heading}} ) {
    print $ofh ",$cat";
  }
  print $ofh "\n";
}


exit;

####################################################################################################

sub GetCategoryID {
  my $eL = shift;
  my $c1 = $eL->{Storefront}->{StoreCategoryID};
  my $c2 = $eL->{Storefront}->{StoreCategory2ID};

  if ( $c2 ) {
    if ( ($c1 == $categoryNameHash->{'Autism & Special Needs'} or $c1 == $categoryNameHash->{'CLEARANCE'})   and $c2 ) {
      return($c2,$c1);
    }
    else {
      return($c1,$c2);
    }
  }
  else {
    return ($c1,'');
  }
}

sub LoadCategory {
  my ($hr_cat, $fullname) = @_;
  my $currentID   = $hr_cat->{CategoryID};

  if ( defined $hr_cat->{ChildCategory} ) {
    # fix node if it's a hash instead of array reference
    if ( ref($hr_cat->{ChildCategory}) =~ /.*hash.*/i ) {
      my $tmp = $hr_cat->{ChildCategory};
      $hr_cat->{ChildCategory} = [];
      $hr_cat->{ChildCategory}->[0] = $tmp;
    }

    for my $hr_scat ( @{$hr_cat->{ChildCategory}} ) {
      my $childname  = "$fullname -> " . $hr_scat->{Name};
      LoadCategory( $hr_scat, $childname );
    }
  }
  else {
    $categoryIDHash->{$currentID} = $fullname;
    $categoryNameHash->{$fullname} = $currentID;
  }
}

sub submit_request {
	my ($call_name, $request, $objHeader) = @_;
  my ($objRequest, $objUserAgent, $objResponse);
  my $request_sent_attempts = 0;

	$header->remove_header('X-EBAY-API-CALL-NAME');
	$header->push_header  ('X-EBAY-API-CALL-NAME' => $call_name);

  RESEND_REQUEST:
  $request_sent_attempts++;

  # Create UserAgent and Request objects
  $objUserAgent = LWP::UserAgent->new;
  $objRequest   = HTTP::Request->new(
    "POST",
    "https://api.ebay.com/ws/api.dll",
    $objHeader,
    $request
  );

	#print "\n objHeader : ",Dumper($objHeader);
	#print "\n request   : ",Dumper($request);
	#print "\n objRequest: ",Dumper($objRequest);

  # Submit Request
  $objResponse = $objUserAgent->request($objRequest);		# SEND REQUEST

  # Parse Response object to get Acknowledgement 
	my $content =  $objResponse->content;
	my $response_hash = XMLin( "$content",  
      ForceArray=>['InternationalShippingServiceOption','ShippingServiceOptions','ShipToLocation','Variation','NameValueList', ] );
	#my $response_hash = XMLin( $content );
  my $ack = $response_hash->{Ack};

  if (!$objResponse->is_error && $ack =~ /success/i ) {
		#print "\n\n";
		#print  "Status          : Success\n";
		#print  "Object Content  :\n";
		#print  $objResponse->content;
		#print Dumper( $response_hash );

    return $response_hash;
  }
  else {
		print "\n\n";
    print  "Response msg.   : ", Dumper( $response_hash->{Errors} );
    print  "Status          : FAILED";
    print  $objResponse->error_as_HTML;

    # Resend update request
    if ( $request_sent_attempts < 1 ) {
      print  "Attempting to resend update request.\n";
      goto RESEND_REQUEST;
    }

		die;
  }

} # end submit_request()

