#!/usr/bin/perl -w 
# generated by wxGlade 0.6.5 (standalone edition) on Fri Nov 30 13:55:30 2012
# To get wxPerl visit http://wxPerl.sourceforge.net/

#
# DESCRIPTION:  Gets list of all 'Item Specifics' and all ebay 'Categories' used in current listings
#               Valuable for analyzing existing listings. Next step might be to determine the
#               default/recommended item specifics for each category.
#

use strict;
use LWP::UserAgent;
use LWP::Simple;
use HTTP::Request;
use HTTP::Headers;
use HTML::Restrict;
use DBI;
use XML::Simple qw(XMLin XMLout);
# use XML::Tidy;
use Date::Calc 'Today';
use Data::Dumper 'Dumper';			$Data::Dumper::Sortkeys = 1;
use File::Copy qw(copy move);
use POSIX;
use Getopt::Std;
use Storable 'dclone';

my %opts;
getopts('i:raDI:O:',\%opts);
# -i <ebay item ID>		- perform operations on this single item
# -a                  - perform operations on all items
# -r 									- revise item(s)
# -D                  - Debug/verbose mode. 
# -I <filename>       - Input filename. csv format (same as output. PUT NEW VALUE IN THE "TOTAL SHIPPING COST" column)
# -O <filename>       - output filename base. default is 'product_import'
my @item_list;
my $process_all_items = 0;

if ( defined $opts{i} ) {
	@item_list = split(',',$opts{i});
}
elsif ( defined $opts{a} ) {
  $process_all_items = 1;
}
else {
	die "must supply either option '-i <item id>' or '-a' option";
}

my $REVISE_ITEM = defined $opts{r} ? 1 : 0;
my $DEBUG       = defined $opts{D} ? 1 : 0;
my $infile      = defined $opts{I} ? $opts{I} : '';
my $outfile     = defined $opts{O} ? $opts{O} : 'info';

my $of_CAT = $outfile . '.categories.csv';

###################################################
# EBAY API INFO                                   #
###################################################

my $header = HTTP::Headers->new;
$header->push_header('X-EBAY-API-COMPATIBILITY-LEVEL' => '705');
$header->push_header('X-EBAY-API-DEV-NAME'  => 'd57759d2-efb7-481d-9e76-c6fa263405ea');
$header->push_header('X-EBAY-API-APP-NAME'  => 'KenCicog-a670-43d6-ae0e-508a227f6008');
$header->push_header('X-EBAY-API-CERT-NAME' => '8fa915b9-d806-45ef-ad4b-0fe22166b61e');
$header->push_header('X-EBAY-API-CALL-NAME' => '');                                       # Supply call name to submit_request() 
$header->push_header('X-EBAY-API-SITEID'    => '0');                                      # 0 => usa
$header->push_header('Content-Type'         => 'text/xml');

# eBayAuthToken
my $eBayAuthToken = 'AgAAAA**AQAAAA**aAAAAA**vtX/UQ**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6wHlIKoCZCBogmdj6x9nY+seQ**4EwAAA**AAMAAA**STlZD2itOoFzuIxszRtU4qG8NaVVfsxnHlx6dwi0YdVwpuzxsNCtBNLW0SoHmrkbxzcCwwUjpuuQCSa/0iy6gZDTt7cXNpCaXDWZfs3jtmcLRxNIIdVVvM4P493ZnoCp5FaIkHqzXAicJVJQMDWdtXObBlDHAUBP/cormpkCecX0OCihrz2uvw8xPphYPvHG6C5WbJ+ZaY/wSMWH/zarIEaBUbm1dySWU8/9yLZo8FjLe3EqCh/At7Erqg+4P1PdhOhUszZrf0xZa57anbzK1K+kw8wjwAUhrgVK5UevKR+HCVZyoO8ndHmSrP8NH8L8SMwtWY2tYivFel8Pt2FvmcnRzRxQCIlxD3PjLtBCUK8McvdWuADZZXDI5ATMoTJLKNX1FXzBliluIXbuHxzSWN9tx00RmPyLmx5k0nlc4Wz9BZlxrXvEf3pRoaCT9Wgq+uGEhsjY1t8+QZlYKFoZiXl4PzMblzrpIe9tZIpx/y0Wo0FQFiR139Z8l3xzlDsw7FB7tiWMwoTHRQaBEa6duDUttKrJDS2atxBmOo+XCLYOjYIEShCz1lOzqkyoDDE+JBcgcGAVWStYvYg0kmMc01gzhHr0xIkMIY1XPQGEe2yz5ZejIoFvEC75ffN0bdUMHsISrU48Qny2OkHmBFHptW+2/EGSNvh35bR1hF+dLsqiUr0VuKCKyLdyok0BYw9eHwILwlDvnxhw4lb13DPXCmSg1qGWPMB3IJaDRPDT9rKo+d1RSRXNQ5eMPlqJtZFi';

my $request_getStore_default = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetStoreRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
<CategoryStructureOnly>TRUE</CategoryStructureOnly>
</GetStoreRequest>
END_XML

my $request_getmyebayselling = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetMyeBaySellingRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
<ActiveList>
	<Include>true</Include>
	<Pagination>
		<EntriesPerPage>200</EntriesPerPage>
		<PageNumber>__PAGE_NUMBER__</PageNumber>
	</Pagination>
</ActiveList>
</GetMyeBaySellingRequest>
END_XML

my $request_getitem_default = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetItemRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
<ItemID>__ItemID__</ItemID>
<IncludeItemSpecifics>TRUE</IncludeItemSpecifics>
</GetItemRequest>
END_XML

########################################
# SQL
########################################


###########################################################
# END EBAY API INFO                                       #
###########################################################

# Open output files
open my $ofh_CAT, '>', $of_CAT or die "can't open file";

my $request;
my $response_hash;

################################################################################
# Get list of all item id's
################################################################################
my @all_items;
my $pagenumber=1;
my $maxpages=1000000;

if ( ! $process_all_items ) {
	push(@all_items,@item_list);
}
else {
  while ( $pagenumber <= $maxpages ) {
    $request = $request_getmyebayselling;
    $request =~ s/__PAGE_NUMBER__/$pagenumber/;
    $response_hash = submit_request( 'GetMyeBaySelling', $request, $header );
    for my $i ( @{$response_hash->{ActiveList}->{ItemArray}->{Item}} ) {
      push(@all_items, $i->{ItemID});
      #print Dumper( $i->{ItemID} ); exit;
    }
    if ($pagenumber==1) {
      $maxpages = $response_hash->{ActiveList}->{PaginationResult}->{TotalNumberOfPages};
    }
    $pagenumber++;
  }
}

my $all_items_count = scalar @all_items;


################################################################################
# Loop over each item (active on eBay)
################################################################################
my $rec_count = 0;
my $item_count=0;
my $SKU_counter = 0;
my $categoryIDHash = {};
my $categoryNameHash = {};
my $allattributeHash = {};
my $allebaycategories = {};

for my $item_id ( reverse @all_items ) {
  # Get detailed info from ebay on this itemID
  $request = $request_getitem_default;
  $request =~ s/__ItemID__/$item_id/;
  my $ebayResponse = submit_request( 'GetItem', $request, $header );
  my $ebayListing = $ebayResponse->{Item};
  if ( $DEBUG ) { print Dumper($ebayListing); exit; }

  my $title = $ebayListing->{Title};
  $title =~ s/"/''/g;

  # Get Attribute list ( this will be the same for each variation )
  if ( defined $ebayListing->{ItemSpecifics} ) {
    for my $a ( @{$ebayListing->{ItemSpecifics}->{NameValueList}} ) {
      my $spec = $a->{Name};
      $spec =~ s/"/''/g;
      $allattributeHash->{ $spec }->{ $title }++;
    }
  }

  my $ebayCategoryName = $ebayListing->{PrimaryCategory}->{CategoryName};
  $allebaycategories->{$ebayCategoryName}->{ $title }++;
}


print $ofh_CAT "\n\nITEM SPECIFICS: \n";
for my $is ( sort keys %$allattributeHash ) {
  for my $t ( sort keys %{$allattributeHash->{$is}} ) {
    print $ofh_CAT qq/"$is","$t"\n/;
  }
}

print $ofh_CAT "\n\nEBAY CATEGORIES: \n";
for my $cat ( sort keys %$allebaycategories ) {
  for my $title ( sort keys %{$allebaycategories->{$cat}} ) {
    print $ofh_CAT qq/"$cat","$title"\n/;
  }
}


close $ofh_CAT;


exit;

####################################################################################################

sub GetCategoryID {
  my $eL = shift;
  my $c1 = $eL->{Storefront}->{StoreCategoryID};
  my $c2 = $eL->{Storefront}->{StoreCategory2ID};

  if ( ($c1 eq $categoryNameHash->{'Autism & Special Needs'} or $c1 eq $categoryNameHash->{'CLEARANCE'}) and $c2 ) {
    $c1 = $c2;
  }

  return $c1;
}

sub LoadCategory {
  my ($hr_cat, $fullname) = @_;
  my $currentID   = $hr_cat->{CategoryID};

  if ( defined $hr_cat->{ChildCategory} ) {
    # fix node if it's a hash instead of array reference
    if ( ref($hr_cat->{ChildCategory}) =~ /.*hash.*/i ) {
      my $tmp = $hr_cat->{ChildCategory};
      $hr_cat->{ChildCategory} = [];
      $hr_cat->{ChildCategory}->[0] = $tmp;
    }

    for my $hr_scat ( @{$hr_cat->{ChildCategory}} ) {
      my $childname  = "$fullname -> " . $hr_scat->{Name};
      LoadCategory( $hr_scat, $childname );
    }
  }
  else {
    $categoryIDHash->{$currentID} = $fullname;
    $categoryNameHash->{$fullname} = $currentID;
  }
}

sub submit_request {
	my ($call_name, $request, $objHeader) = @_;
  my ($objRequest, $objUserAgent, $objResponse);
  my $request_sent_attempts = 0;

	$header->remove_header('X-EBAY-API-CALL-NAME');
	$header->push_header  ('X-EBAY-API-CALL-NAME' => $call_name);

  RESEND_REQUEST:
  $request_sent_attempts++;

  # Create UserAgent and Request objects
  $objUserAgent = LWP::UserAgent->new;
  $objRequest   = HTTP::Request->new(
    "POST",
    "https://api.ebay.com/ws/api.dll",
    $objHeader,
    $request
  );

	#print "\n objHeader : ",Dumper($objHeader);
	#print "\n request   : ",Dumper($request);
	#print "\n objRequest: ",Dumper($objRequest);

  # Submit Request
  $objResponse = $objUserAgent->request($objRequest);		# SEND REQUEST

  # Parse Response object to get Acknowledgement 
	my $content =  $objResponse->content;
	my $response_hash = XMLin( "$content",  
      ForceArray=>['InternationalShippingServiceOption','ShippingServiceOptions','ShipToLocation','Variation','NameValueList', ] );
	#my $response_hash = XMLin( $content );
  my $ack = $response_hash->{Ack};

  if (!$objResponse->is_error && $ack =~ /success/i ) {
		#print "\n\n";
		#print  "Status          : Success\n";
		#print  "Object Content  :\n";
		#print  $objResponse->content;
		#print Dumper( $response_hash );

    return $response_hash;
  }
  else {
		print "\n\n";
    print  "Response msg.   : ", Dumper( $response_hash->{Errors} );
    print  "Status          : FAILED";
    print  $objResponse->error_as_HTML;

    # Resend update request
    if ( $request_sent_attempts < 1 ) {
      print  "Attempting to resend update request.\n";
      goto RESEND_REQUEST;
    }

		die;
  }

} # end submit_request()

